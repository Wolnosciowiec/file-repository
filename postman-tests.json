{
	"info": {
		"_postman_id": "101b2f6d-85d5-4c78-aa91-fc19c9836058",
		"name": "[Wolno≈õciowiec] File Repository",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Generate basic token for images only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f75b530a-1115-47f7-a43d-185141a11ff7",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"",
									"pm.globals.set(\"token_basic\", jsonData.tokenId);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\"]\n}"
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/generate?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"generate"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lookup basic token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b6d1e26-465d-4afe-9758-58d34715c93c",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has role to upload images\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"upload.images\");",
									"});",
									"",
									"pm.test(\"Has not defined max file size\", function () {",
									"    pm.expect(jsonData.max_file_size).to.equal(0);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\", \"this-role-is-invalid\"]\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/{{token_basic}}?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"lookup",
								"{{token_basic}}"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate token with tags and allowed mimes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b17d2a3-5f08-4e75-bd7f-f9290e9b0a0d",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.globals.set(\"token_with_tags_and_mimes\", jsonData.tokenId);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\"],\n    \"data\": {\n        \"tags\": [\"user_uploads.u123\", \"user_uploads\"],\n        \"allowedMimeTypes\": [\"image/jpeg\", \"image/png\", \"image/gif\"],\n        \"maxAllowedFileSize\": 14579\n    }\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/generate?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"generate"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lookup token with tags and mimes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f090abd-6cd6-4902-adc4-56c5697afb1d",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Can upload for specific tags\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"user_uploads.u123\");",
									"    pm.expect(pm.response.text()).to.include(\"user_uploads\");",
									"});",
									"",
									"pm.test(\"Has role to upload images\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"upload.images\");",
									"});",
									"",
									"pm.test(\"Has defined max file size\", function () {",
									"    pm.expect(jsonData.max_file_size).to.equal(14579);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/{{token_with_tags_and_mimes}}?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"lookup",
								"{{token_with_tags_and_mimes}}"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Job] Clear expired tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c03c1076-3007-4543-b316-4eaec7021fcd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\", \"this-role-is-invalid\"]\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/jobs/token/expired/clear?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"jobs",
								"token",
								"expired",
								"clear"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate token with not enough allowed maximum file size (100b)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f8cd581-cea0-4038-af88-1ea8e09fc8b7",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.globals.set(\"token_with_low_file_size_limit\", jsonData.tokenId);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\"],\n    \"data\": {\n        \"tags\": [\"user_uploads.u123\", \"user_uploads\"],\n        \"allowedMimeTypes\": [\"image/jpeg\", \"image/png\", \"image/gif\"],\n        \"maxAllowedFileSize\": 100\n    }\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/generate?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"generate"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Validation] Invalid role name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e86decd2-0765-4301-9f99-485468ced6ce",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Please select valid roles\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\", \"this-role-is-invalid\"]\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/generate?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"generate"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Validation] Cannot generate token without proper role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "500828af-d547-4a4d-8e39-07a4e403f31d",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\"],\n    \"data\": {\n        \"tags\": [\"user_uploads.u123\", \"user_uploads\"],\n        \"allowedMimeTypes\": [\"image/jpeg\", \"image/png\", \"image/gif\"],\n        \"maxAllowedFileSize\": 14579\n    }\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/generate?_token={{token_with_tags_and_mimes}}",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"generate"
							],
							"query": [
								{
									"key": "_token",
									"value": "{{token_with_tags_and_mimes}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Validation] Cannot lookup tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31215dc8-d91f-41ae-b801-1799542efaa6",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\", \"this-role-is-invalid\"]\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/{{token_basic}}?_token={{token_with_tags_and_mimes}}",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"lookup",
								"{{token_basic}}"
							],
							"query": [
								{
									"key": "_token",
									"value": "{{token_with_tags_and_mimes}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Validation][Job] Cannot run technical job without proper role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5797775a-7e22-4731-af15-9bc3f5d9a87d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\", \"this-role-is-invalid\"]\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/jobs/token/expired/clear?_token={{token_with_tags_and_mimes}}",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"jobs",
								"token",
								"expired",
								"clear"
							],
							"query": [
								{
									"key": "_token",
									"value": "{{token_with_tags_and_mimes}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Roles listing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c103d2a2-8227-4ba3-bce6-60465ab3489c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Contains roles list as a dict\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(typeof jsonData.roles).to.eql('object');",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"upload.images\", \"this-role-is-invalid\"]\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/auth/roles?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"roles"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Technical",
			"item": [
				{
					"name": "List routes",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{appUrl}}/repository/routing/map",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository",
								"routing",
								"map"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hello",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2d61b07-a205-4645-9751-c239bcc7836a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{appUrl}}/",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Registry: Upload / Delete",
			"item": [
				{
					"name": "[Upload] By URL",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fileUrl\": \"http://zsp.net.pl/files/barroness_logo.png\",\n    \"tags\": [],\n    \"public\": true\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/repository/image/add-by-url?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository",
								"image",
								"add-by-url"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Delete] Remove file added previously",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc11ec8c-cc22-4cd1-81e0-cc1984b26bfe",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fileUrl\": \"https://iwa-ait.org/sites/default/files/iwaait_1.png\",\n    \"password\": \"InternationalWorkersAssociation\",\n    \"tags\": []\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/repository/file/f8f39c14c7df5976aa1257f05692337c71bb749012022fe7eba74539248ae376_barroness_logo.png?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository",
								"file",
								"f8f39c14c7df5976aa1257f05692337c71bb749012022fe7eba74539248ae376_barroness_logo.png"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Upload] Again same file by URL with password",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fileUrl\": \"http://zsp.net.pl/files/barroness_logo.png\",\n    \"password\": \"InternationalWorkersAssociation\",\n    \"tags\": []\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/repository/image/add-by-url?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository",
								"image",
								"add-by-url"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Delete] Try to delete file without correct password and non-admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18d6696c-d6c7-459e-a16e-65e919b53b21",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fileUrl\": \"https://iwa-ait.org/sites/default/files/iwaait_1.png\",\n    \"password\": \"InternationalWorkersAssociation\",\n    \"tags\": []\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/repository/file/f8f39c14c7df5976aa1257f05692337c71bb749012022fe7eba74539248ae376_barroness_logo.png",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository",
								"file",
								"f8f39c14c7df5976aa1257f05692337c71bb749012022fe7eba74539248ae376_barroness_logo.png"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Upload] Add a file with a tag",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fileUrl\": \"file://examples/files/image.jpg\",\n    \"tags\": [\n    \t\"grassroot\", \"memes\"\n    ]\n}\n"
						},
						"url": {
							"raw": "{{appUrl}}/repository/image/add-by-url?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository",
								"image",
								"add-by-url"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Upload] Too big file",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ba44b81-0292-4503-91f9-7cdff9ca04c5",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Checks the file size is validated\", function () {",
									"    pm.expect(jsonData.status).to.eql('File size is too big');",
									"    pm.expect(jsonData.http_code).to.eql(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": {
							"raw": "{{appUrl}}/repository/image/upload?_token={{token_with_low_file_size_limit}}&fileName=heart.png",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository",
								"image",
								"upload"
							],
							"query": [
								{
									"key": "_token",
									"value": "{{token_with_low_file_size_limit}}"
								},
								{
									"key": "fileName",
									"value": "heart.png"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Upload] Not allowed mime type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e4e64f0-1228-4e16-8c2f-ef280ed08309",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Checks the file size is validated\", function () {",
									"    pm.expect(jsonData.status).to.eql('Mime type not allowed');",
									"    pm.expect(jsonData.code).to.eql(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "one-two-three a plaintext file here\n"
						},
						"url": {
							"raw": "{{appUrl}}/repository/image/upload?_token={{token_with_low_file_size_limit}}&fileName=heart.png",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository",
								"image",
								"upload"
							],
							"query": [
								{
									"key": "_token",
									"value": "{{token_with_low_file_size_limit}}"
								},
								{
									"key": "fileName",
									"value": "heart.png"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f170a6e9-2d09-42bd-8872-2a186eef98cf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cc44a1b7-8dae-4c31-ab72-d52cf476c3c3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Registry: Listing",
			"item": [
				{
					"name": "Generate token for listing ALL tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a294cd3-a2bb-4dee-8655-d1d05b0258f9",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"",
									"pm.globals.set(\"token_list_all_tags\", jsonData.tokenId);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\"view.files_from_all_tags\", \"view.can_use_listing_endpoint_at_all\"]\n}"
						},
						"url": {
							"raw": "{{appUrl}}/auth/token/generate?_token=test-token-full-permissions",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"auth",
								"token",
								"generate"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List all files",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2f1b3da9-20b5-469b-92a3-f365d8f96dd4",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Current page is first\", function () {",
									"    pm.expect(jsonData.pagination.current).to.eql(1);",
									"});",
									"",
									"pm.test(\"Maximum amount of results is 1 per page\", function () {",
									"    pm.expect(jsonData.pagination.current).to.eql(1);",
									"});",
									"",
									"pm.test(\"Maximum amount of results is 2 per page\", function () {",
									"    pm.expect(jsonData.pagination.perPage).to.eql(2);",
									"});",
									"",
									"pm.test(\"There are exactly 2 results\", function () {",
									"    pm.expect(jsonData.results.length).to.eql(2);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{appUrl}}/repository?_token=test-token-full-permissions&page=1&limit=2",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by TEXT 'barroness_logo'",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d140e820-b6f3-4bf5-9054-b4f82b5b0680",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Current page is first\", function () {",
									"    pm.expect(jsonData.pagination.current).to.eql(1);",
									"});",
									"",
									"pm.test(\"Maximum per page is fallback to default - 20 elements per page\", function () {",
									"    pm.expect(jsonData.pagination.perPage).to.eql(20);",
									"});",
									"",
									"pm.test(\"There is only one match\", function () {",
									"    pm.expect(jsonData.results.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"First result atches file we were looking for - baroness_logo\", function () {",
									"    pm.expect(jsonData.results[0].publicUrl).to.contain('barroness_logo.png');",
									"    pm.expect(jsonData.results[0].mimeType).to.equal('image/png');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{appUrl}}/repository?_token=test-token-full-permissions&searchQuery=barroness_logo",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository"
							],
							"query": [
								{
									"key": "_token",
									"value": "test-token-full-permissions"
								},
								{
									"key": "searchQuery",
									"value": "barroness_logo"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Encrypted file should be anonymous if password not specified",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b69ed365-790a-49e7-9b2f-6a1743fe4c64",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"File name is anonymous\", function () {",
									"    pm.expect(jsonData.results[0].filename).to.equal('anonymous');",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{appUrl}}/repository?_token={{token_list_all_tags}}&searchQuery=barroness_logo",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository"
							],
							"query": [
								{
									"key": "_token",
									"value": "{{token_list_all_tags}}"
								},
								{
									"key": "searchQuery",
									"value": "barroness_logo"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Encrypted file should be visible when correct password supplied",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97cb3791-026d-43b1-9e27-fdc1d0529092",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"File name is not hidden when password is correct\", function () {",
									"    pm.expect(jsonData.results[0].filename).to.not.equal('anonymous');",
									"    pm.expect(jsonData.results[0].filename).to.contain('barroness_logo');",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{appUrl}}/repository?_token={{token_list_all_tags}}&searchQuery=barroness_logo&password=InternationalWorkersAssociation",
							"host": [
								"{{appUrl}}"
							],
							"path": [
								"repository"
							],
							"query": [
								{
									"key": "_token",
									"value": "{{token_list_all_tags}}"
								},
								{
									"key": "searchQuery",
									"value": "barroness_logo"
								},
								{
									"key": "password",
									"value": "InternationalWorkersAssociation"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Backup",
			"item": [
				{
					"name": "Collection creation and editing",
					"item": [
						{
							"name": "Validation",
							"item": [
								{
									"name": "Validation check",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0755515f-95e1-49cf-bec7-07bbf9586899",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"All fields are at its place\", function () {",
													"    pm.expect(jsonData.errors.maxBackupsCount).to.eql('number_cannot_be_negative_value');",
													"    pm.expect(jsonData.errors.maxOneVersionSize).to.eql('cannot_parse_disk_space_check_format');",
													"    pm.expect(jsonData.errors.strategy).to.eql('unknown_strategy_allowed___delete_oldest_when_adding_new___or__alert_when_backup_limit_reached');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"maxBackupsCount\": -5,\n\t\"maxOneVersionSize\": \"invalid-format-cannot-parse\",\n\t\"maxCollectionSize\": \"1111\",\n\t\"strategy\": \"invalid_strategy\",\n\t\"description\": null,\n\t\"filename\": \"valid-filname.txt\"\n}\n"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection?_token=test-token-full-permissions",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection"
											],
											"query": [
												{
													"key": "_token",
													"value": "test-token-full-permissions"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Validation] Single element size cannot be bigger than whole collection limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1de254cc-720e-4930-bd0b-5510fd1cb72c",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"maxCollectionSize is properly validated\", function () {",
													"    pm.expect(jsonData.errors.maxCollectionSize).to.eql('max_collection_size_is_lower_than_single_element_size');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"maxBackupsCount\": 4,\n\t\"maxOneVersionSize\": \"11MB\",\n\t\"maxCollectionSize\": \"10MB\",\n\t\"strategy\": \"alert_when_backup_limit_reached\",\n\t\"description\": null,\n\t\"filename\": \"zsp-net-pl.sql.gz\"\n}\n"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection?_token=test-token-full-permissions",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection"
											],
											"query": [
												{
													"key": "_token",
													"value": "test-token-full-permissions"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Validation] Single element limit is bigger than globally defined",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d7b7e65-0e8a-42da-ad76-e3e6088cd93c",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"maxOneVersionSize is properly validated\", function () {",
													"    pm.expect(jsonData.errors.maxOneVersionSize).to.eql('max_one_version_size_too_big');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"maxBackupsCount\": 4,\n\t\"maxOneVersionSize\": \"50MB\",\n\t\"maxCollectionSize\": \"10MB\",\n\t\"strategy\": \"alert_when_backup_limit_reached\",\n\t\"description\": null,\n\t\"filename\": \"zsp-net-pl.sql.gz\"\n}\n"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection?_token=test-token-full-permissions",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection"
											],
											"query": [
												{
													"key": "_token",
													"value": "test-token-full-permissions"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Validation] Whole collection size (mb/kb/gb) is bigger than globally defined limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "372a0b11-0eac-4da2-b8e3-cd0fb56004ef",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"maxCollectionSize cannot be bigger than the defined limit\", function () {",
													"    pm.expect(jsonData.errors.maxCollectionSize).to.eql('max_collection_size_too_big');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"maxBackupsCount\": 4,\n\t\"maxOneVersionSize\": \"1MB\",\n\t\"maxCollectionSize\": \"5TB\",\n\t\"strategy\": \"alert_when_backup_limit_reached\",\n\t\"description\": null,\n\t\"filename\": \"zsp-net-pl.sql.gz\"\n}\n"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection?_token=test-token-full-permissions",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection"
											],
											"query": [
												{
													"key": "_token",
													"value": "test-token-full-permissions"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Validation] Max backup count cannot be higher than globally defined limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "231c444d-9820-47ee-b597-505da35a8eba",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"maxBackupsCount cannot be bigger than the defined limit\", function () {",
													"    pm.expect(jsonData.errors.maxBackupsCount).to.eql('max_backups_count_too_many');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"maxBackupsCount\": 9000,\n\t\"maxOneVersionSize\": \"5MB\",\n\t\"maxCollectionSize\": \"10MB\",\n\t\"strategy\": \"alert_when_backup_limit_reached\",\n\t\"description\": null,\n\t\"filename\": \"zsp-net-pl.sql.gz\"\n}\n"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection?_token=test-token-full-permissions",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection"
											],
											"query": [
												{
													"key": "_token",
													"value": "test-token-full-permissions"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Validation] Collection is has not enough max space",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee2ba435-98a8-41d1-ad51-1f876e85d4c7",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"A combination of maxBackupsCount and maxOneVersionSize must give at less or equal maxCollectionSize\", function () {",
													"    pm.expect(jsonData.errors.maxCollectionSize).to.eql('max_collection_size_will_have_not_enough_space_to_keep_max_number_of_items');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"maxBackupsCount\": 5,\n\t\"maxOneVersionSize\": \"5MB\",\n\t\"maxCollectionSize\": \"5MB\",\n\t\"strategy\": \"alert_when_backup_limit_reached\",\n\t\"description\": null,\n\t\"filename\": \"zsp-net-pl.sql.gz\"\n}\n"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection?_token=test-token-full-permissions&simulate=true",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection"
											],
											"query": [
												{
													"key": "_token",
													"value": "test-token-full-permissions"
												},
												{
													"key": "simulate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Permissions check",
							"item": [
								{
									"name": "[Permissions -> Limits] Create token that does not allow creating unlimited collections",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eeca4c93-8eec-4230-b205-6df99bf28205",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"pm.globals.set(\"token_without_unlimited_collections\", jsonData.tokenId);",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"roles\": [\"collections.create_new\"],\n    \"data\": {\n        \"tags\": [\"user_uploads.u123\", \"user_uploads\"],\n        \"allowedMimeTypes\": [\"image/jpeg\", \"image/png\", \"image/gif\"],\n        \"maxAllowedFileSize\": 14579\n    }\n}\n"
										},
										"url": {
											"raw": "{{appUrl}}/auth/token/generate?_token=test-token-full-permissions",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"auth",
												"token",
												"generate"
											],
											"query": [
												{
													"key": "_token",
													"value": "test-token-full-permissions"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Permissions -> Limits] Create token for unlimited collections creating",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e63ae3c-d79c-4975-8338-ca6809ad1498",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"pm.globals.set(\"token_unlimited_collections\", jsonData.tokenId);",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"roles\": [\"collections.create_new\", \"collections.allow_infinite_limits\"],\n    \"data\": {\n        \"tags\": [\"user_uploads.u123\", \"user_uploads\"],\n        \"allowedMimeTypes\": [\"image/jpeg\", \"image/png\", \"image/gif\"],\n        \"maxAllowedFileSize\": 14579\n    }\n}\n"
										},
										"url": {
											"raw": "{{appUrl}}/auth/token/generate?_token=test-token-full-permissions",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"auth",
												"token",
												"generate"
											],
											"query": [
												{
													"key": "_token",
													"value": "test-token-full-permissions"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create collection: not allowed to create collection with infinite limits",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "612c51f3-f96a-4f69-bad1-1f2cd0add9ad",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"A proper message about access rights will appear\", function () {",
													"    pm.expect(jsonData.status).to.eql('Current token does not allow to create this collection');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"maxBackupsCount\": 5,\n\t\"maxOneVersionSize\": 0,\n\t\"maxCollectionSize\": \"5MB\",\n\t\"strategy\": \"delete_oldest_when_adding_new\",\n\t\"description\": \"Test collection\"\n}\n"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection?_token={{token_without_unlimited_collections}}&simulate=true",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection"
											],
											"query": [
												{
													"key": "_token",
													"value": "{{token_without_unlimited_collections}}"
												},
												{
													"key": "simulate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create collection: allowed to create infinite collections",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51b55601-3b8c-4811-9323-e373c16502f8",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"pm.test(\"Id is 36 length UUID\", function () {",
													"    pm.expect(jsonData.collection.id.length).to.eql(36);",
													"});",
													"",
													"pm.test(\"All fields are at its place\", function () {",
													"    pm.expect(jsonData.collection.max_backups_count).to.eql(5);",
													"    pm.expect(jsonData.collection.max_one_backup_version_size).to.eql(0);",
													"    pm.expect(jsonData.collection.max_collection_size).to.eql(5000000);",
													"    pm.expect(jsonData.collection.strategy).to.eql('delete_oldest_when_adding_new');",
													"    pm.expect(jsonData.collection.description).to.eql('Test collection');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"maxBackupsCount\": 5,\n\t\"maxOneVersionSize\": 0,\n\t\"maxCollectionSize\": \"5MB\",\n\t\"strategy\": \"delete_oldest_when_adding_new\",\n\t\"description\": \"Test collection\",\n\t\"filename\": \"zsp-net-pl.sql.gz\"\n}\n"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection?_token={{token_unlimited_collections}}&simulate=true",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection"
											],
											"query": [
												{
													"key": "_token",
													"value": "{{token_unlimited_collections}}"
												},
												{
													"key": "simulate",
													"value": "true"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Create a token that allows to create collections",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0fb68bc5-c302-4e99-b07f-44907e0de989",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.globals.set(\"token_create_collections\", jsonData.tokenId);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"roles\": [\"collections.create_new\", \"collections.add_tokens_to_allowed_collections\"],\n    \"data\": {\n        \"tags\": [\"user_uploads.u123\", \"user_uploads\"],\n        \"allowedMimeTypes\": [\"image/jpeg\", \"image/png\", \"image/gif\"],\n        \"maxAllowedFileSize\": 14579\n    }\n}\n"
								},
								"url": {
									"raw": "{{appUrl}}/auth/token/generate?_token=test-token-full-permissions",
									"host": [
										"{{appUrl}}"
									],
									"path": [
										"auth",
										"token",
										"generate"
									],
									"query": [
										{
											"key": "_token",
											"value": "test-token-full-permissions"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create collection: success (#1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "919b2953-b104-4093-9c76-019785d7d32d",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Id is 36 length UUID\", function () {",
											"    pm.expect(jsonData.collection.id.length).to.eql(36);",
											"});",
											"",
											"pm.test(\"All fields are at its place\", function () {",
											"    pm.expect(jsonData.collection.max_backups_count).to.eql(5);",
											"    pm.expect(jsonData.collection.max_one_backup_version_size).to.eql(1000000);",
											"    pm.expect(jsonData.collection.max_collection_size).to.eql(5000000);",
											"    pm.expect(jsonData.collection.strategy).to.eql('delete_oldest_when_adding_new');",
											"    pm.expect(jsonData.collection.description).to.eql('ZSP uploads directory');",
											"});",
											"",
											"",
											"pm.globals.set(\"collection_1\", jsonData.collection.id);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"maxBackupsCount\": 5,\n\t\"maxOneVersionSize\": \"1MB\",\n\t\"maxCollectionSize\": \"5MB\",\n\t\"strategy\": \"delete_oldest_when_adding_new\",\n\t\"description\": \"ZSP uploads directory\",\n\t\"filename\": \"zsp-net-pl.sql.gz\"\n}\n"
								},
								"url": {
									"raw": "{{appUrl}}/repository/collection?_token={{token_create_collections}}",
									"host": [
										"{{appUrl}}"
									],
									"path": [
										"repository",
										"collection"
									],
									"query": [
										{
											"key": "_token",
											"value": "{{token_create_collections}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit created collection #1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3cf493b6-5caa-46dc-af4f-ab079affdd43",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Id is 36 length UUID\", function () {",
											"    pm.expect(jsonData.collection.id.length).to.eql(36);",
											"});",
											"",
											"pm.test(\"All fields are at its place\", function () {",
											"    pm.expect(jsonData.collection.max_backups_count).to.eql(5);",
											"    pm.expect(jsonData.collection.max_one_backup_version_size).to.eql(0);",
											"    pm.expect(jsonData.collection.max_collection_size).to.eql(5000000);",
											"    pm.expect(jsonData.collection.strategy).to.eql('delete_oldest_when_adding_new');",
											"    pm.expect(jsonData.collection.description).to.eql('Test collection (modified)');",
											"});",
											"",
											"pm.test(\"Id was not changed\", function () {",
											"    pm.expect(jsonData.collection.id).to.eql(pm.globals.get('collection_1'));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"collection\": \"{{collection_1}}\",\n\t\"maxBackupsCount\": 5,\n\t\"maxOneVersionSize\": 0,\n\t\"maxCollectionSize\": \"5MB\",\n\t\"strategy\": \"delete_oldest_when_adding_new\",\n\t\"description\": \"Test collection (modified)\",\n\t\"filename\": \"zsp-net-pl.sql.gz\"\n}\n"
								},
								"url": {
									"raw": "{{appUrl}}/repository/collection?_token=test-token-full-permissions",
									"host": [
										"{{appUrl}}"
									],
									"path": [
										"repository",
										"collection"
									],
									"query": [
										{
											"key": "_token",
											"value": "test-token-full-permissions"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "511e6518-d5cf-4640-840d-eeb9c3d34036",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f3ff06e5-edb5-403c-bb96-21542152c657",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Collection deletion",
					"item": [
						{
							"name": "Create collection #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0df8cea-1236-4c59-9b3f-3281f904bc2a",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Id is 36 length UUID\", function () {",
											"    pm.expect(jsonData.collection.id.length).to.eql(36);",
											"});",
											"",
											"pm.test(\"All fields are at its place\", function () {",
											"    pm.expect(jsonData.collection.max_backups_count).to.eql(5);",
											"    pm.expect(jsonData.collection.max_one_backup_version_size).to.eql(1000000);",
											"    pm.expect(jsonData.collection.max_collection_size).to.eql(5000000);",
											"    pm.expect(jsonData.collection.strategy).to.eql('delete_oldest_when_adding_new');",
											"    pm.expect(jsonData.collection.description).to.eql('IWA-AIT.org old format backups');",
											"});",
											"",
											"",
											"pm.globals.set(\"collection_2\", jsonData.collection.id);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"maxBackupsCount\": 5,\n\t\"maxOneVersionSize\": \"1MB\",\n\t\"maxCollectionSize\": \"5MB\",\n\t\"strategy\": \"delete_oldest_when_adding_new\",\n\t\"description\": \"IWA-AIT.org old format backups\",\n\t\"filename\": \"iwa-ait-old-backups.zip\"\n}\n"
								},
								"url": {
									"raw": "{{appUrl}}/repository/collection?_token={{token_create_collections}}",
									"host": [
										"{{appUrl}}"
									],
									"path": [
										"repository",
										"collection"
									],
									"query": [
										{
											"key": "_token",
											"value": "{{token_create_collections}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete collection #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "444a0900-7707-4363-b958-c086197caeff",
										"type": "text/javascript",
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{appUrl}}/repository/collection/{{collection_2}}?_token={{token_create_collections}}",
									"host": [
										"{{appUrl}}"
									],
									"path": [
										"repository",
										"collection",
										"{{collection_2}}"
									],
									"query": [
										{
											"key": "_token",
											"value": "{{token_create_collections}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to delete #2 second time",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26ccbe46-0ae7-43d5-97e5-c8cb9eeff4d8",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error about that the collection was already deleted is present\", function () {",
											"    pm.expect(jsonData['form.collection'][0]).to.eql('collection_no_longer_exists');",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{appUrl}}/repository/collection/{{collection_2}}?_token={{token_create_collections}}",
									"host": [
										"{{appUrl}}"
									],
									"path": [
										"repository",
										"collection",
										"{{collection_2}}"
									],
									"query": [
										{
											"key": "_token",
											"value": "{{token_create_collections}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Attempt to edit deleted collection #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0982e7ef-ffd0-4953-b79f-c371557faaee",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error about that the collection was already deleted is present\", function () {",
											"    pm.expect(jsonData['form.collection'][0]).to.eql('collection_no_longer_exists');",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"collection\": \"{{collection_2}}\",\n\t\"maxBackupsCount\": 5,\n\t\"maxOneVersionSize\": 0,\n\t\"maxCollectionSize\": \"5MB\",\n\t\"strategy\": \"delete_oldest_when_adding_new\",\n\t\"description\": \"Test collection (modified)\"\n}\n"
								},
								"url": {
									"raw": "{{appUrl}}/repository/collection?_token=test-token-full-permissions",
									"host": [
										"{{appUrl}}"
									],
									"path": [
										"repository",
										"collection"
									],
									"query": [
										{
											"key": "_token",
											"value": "test-token-full-permissions"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Collection fetching",
					"item": [
						{
							"name": "Create collection: success (#3)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "176e16d7-86cf-464b-80ee-c56b8d33ab4b",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Id is 36 length UUID\", function () {",
											"    pm.expect(jsonData.collection.id.length).to.eql(36);",
											"});",
											"",
											"pm.test(\"All fields are at its place\", function () {",
											"    pm.expect(jsonData.collection.max_backups_count).to.eql(5);",
											"    pm.expect(jsonData.collection.max_one_backup_version_size).to.eql(1000000);",
											"    pm.expect(jsonData.collection.max_collection_size).to.eql(5000000);",
											"    pm.expect(jsonData.collection.strategy).to.eql('delete_oldest_when_adding_new');",
											"    pm.expect(jsonData.collection.description).to.eql('Solidarity Federation documents backup');",
											"});",
											"",
											"",
											"pm.globals.set(\"collection_3\", jsonData.collection.id);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"maxBackupsCount\": 5,\n\t\"maxOneVersionSize\": \"1MB\",\n\t\"maxCollectionSize\": \"5MB\",\n\t\"strategy\": \"delete_oldest_when_adding_new\",\n\t\"description\": \"Solidarity Federation documents backup\",\n\t\"filename\": \"solfed-docs.tar.gz\"\n}\n"
								},
								"url": {
									"raw": "{{appUrl}}/repository/collection?_token={{token_create_collections}}",
									"host": [
										"{{appUrl}}"
									],
									"path": [
										"repository",
										"collection"
									],
									"query": [
										{
											"key": "_token",
											"value": "{{token_create_collections}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch (#3)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad9227bd-f11a-41c7-b28d-894886a23c70",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Returns a collection of proper id\", function () {",
											"    pm.expect(jsonData.collection.id).to.eql(pm.globals.get('collection_3'));",
											"});",
											"",
											"pm.test(\"Collection has matching description the collection that was created as #3\", function () {",
											"    pm.expect(jsonData.collection.description).to.eql('Solidarity Federation documents backup');",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"maxBackupsCount\": 5,\n\t\"maxOneVersionSize\": \"1MB\",\n\t\"maxCollectionSize\": \"5MB\",\n\t\"strategy\": \"delete_oldest_when_adding_new\",\n\t\"description\": \"Solidarity Federation documents backup\"\n}\n"
								},
								"url": {
									"raw": "{{appUrl}}/repository/collection/{{collection_3}}?_token={{token_create_collections}}",
									"host": [
										"{{appUrl}}"
									],
									"path": [
										"repository",
										"collection",
										"{{collection_3}}"
									],
									"query": [
										{
											"key": "_token",
											"value": "{{token_create_collections}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Collection listing",
					"item": [
						{
							"name": "Listing: Search for ZSP* -> should find \"ZSP uploads directory\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1a5f77d-b9d1-4945-ad9e-60186f679710",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Has element 'ZSP uploads directory'\", function () {",
											"    pm.expect(jsonData.elements[0].description).to.eql('ZSP uploads directory');",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"maxBackupsCount\": 5,\n\t\"maxOneVersionSize\": \"1MB\",\n\t\"maxCollectionSize\": \"5MB\",\n\t\"strategy\": \"delete_oldest_when_adding_new\",\n\t\"description\": \"Solidarity Federation documents backup\"\n}\n"
								},
								"url": {
									"raw": "{{appUrl}}/repository/collection?_token=test-token-full-permissions&createdTo=2050-05-05&createdFrom=2018-01-01&searchQuery=ZSP",
									"host": [
										"{{appUrl}}"
									],
									"path": [
										"repository",
										"collection"
									],
									"query": [
										{
											"key": "_token",
											"value": "test-token-full-permissions"
										},
										{
											"key": "createdTo",
											"value": "2050-05-05"
										},
										{
											"key": "createdFrom",
											"value": "2018-01-01"
										},
										{
											"key": "searchQuery",
											"value": "ZSP"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listing: Show everything",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dbd0a8b9-0951-4b8b-ab0e-bb2a6bbe5d7c",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"There is a pagination\", function () {",
											"    pm.expect(jsonData.pagination.current).to.eql(2);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"maxBackupsCount\": 5,\n\t\"maxOneVersionSize\": \"1MB\",\n\t\"maxCollectionSize\": \"5MB\",\n\t\"strategy\": \"delete_oldest_when_adding_new\",\n\t\"description\": \"Solidarity Federation documents backup\"\n}\n"
								},
								"url": {
									"raw": "{{appUrl}}/repository/collection?_token=test-token-full-permissions&page=2&limit=3",
									"host": [
										"{{appUrl}}"
									],
									"path": [
										"repository",
										"collection"
									],
									"query": [
										{
											"key": "_token",
											"value": "test-token-full-permissions"
										},
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Collection: Token management",
					"item": [
						{
							"name": "Create a token that allows to create collections",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0fb68bc5-c302-4e99-b07f-44907e0de989",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.globals.set(\"token_create_collections\", jsonData.tokenId);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"roles\": [\"collections.create_new\", \"collections.add_tokens_to_allowed_collections\"],\n    \"data\": {\n        \"tags\": [\"user_uploads.u123\", \"user_uploads\"],\n        \"allowedMimeTypes\": [\"image/jpeg\", \"image/png\", \"image/gif\"],\n        \"maxAllowedFileSize\": 14579\n    }\n}\n"
								},
								"url": {
									"raw": "{{appUrl}}/auth/token/generate?_token=test-token-full-permissions",
									"host": [
										"{{appUrl}}"
									],
									"path": [
										"auth",
										"token",
										"generate"
									],
									"query": [
										{
											"key": "_token",
											"value": "test-token-full-permissions"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create other token (will be added as allowed)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35d8061e-656a-4b85-8971-745955df60c0",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.globals.set(\"token_other_to_add_as_allowed\", jsonData.tokenId);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"roles\": [\"security.authentication_lookup\"],\n    \"data\": {\n        \"tags\": [\"user_uploads.u123\", \"user_uploads\"],\n        \"allowedMimeTypes\": [\"image/jpeg\", \"image/png\", \"image/gif\"],\n        \"maxAllowedFileSize\": 500\n    }\n}\n"
								},
								"url": {
									"raw": "{{appUrl}}/auth/token/generate?_token=test-token-full-permissions",
									"host": [
										"{{appUrl}}"
									],
									"path": [
										"auth",
										"token",
										"generate"
									],
									"query": [
										{
											"key": "_token",
											"value": "test-token-full-permissions"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create collection: success (#4)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd816ecf-61bd-4fe7-85bc-563f94977b95",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Id is 36 length UUID\", function () {",
											"    pm.expect(jsonData.collection.id.length).to.eql(36);",
											"});",
											"",
											"pm.test(\"All fields are at its place\", function () {",
											"    pm.expect(jsonData.collection.max_backups_count).to.eql(5);",
											"    pm.expect(jsonData.collection.max_one_backup_version_size).to.eql(1000000);",
											"    pm.expect(jsonData.collection.max_collection_size).to.eql(5000000);",
											"    pm.expect(jsonData.collection.strategy).to.eql('delete_oldest_when_adding_new');",
											"    pm.expect(jsonData.collection.description).to.eql('Grassroot workers organizations documents');",
											"});",
											"",
											"",
											"pm.globals.set(\"collection_4\", jsonData.collection.id);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"maxBackupsCount\": 5,\n\t\"maxOneVersionSize\": \"1MB\",\n\t\"maxCollectionSize\": \"5MB\",\n\t\"strategy\": \"delete_oldest_when_adding_new\",\n\t\"description\": \"Grassroot workers organizations documents\",\n\t\"filename\": \"grass-docs.zip\"\n}\n"
								},
								"url": {
									"raw": "{{appUrl}}/repository/collection?_token={{token_create_collections}}",
									"host": [
										"{{appUrl}}"
									],
									"path": [
										"repository",
										"collection"
									],
									"query": [
										{
											"key": "_token",
											"value": "{{token_create_collections}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a token as allowed token to collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b719f9d6-d5c2-40b2-b111-04129b8f0d86",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"There should be two tokens allowed, first is the token of creator, second was added manually\", function () {",
											"    pm.expect(jsonData.data.tokens_count).to.eql(2);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"{{token_other_to_add_as_allowed}}\"\n}"
								},
								"url": {
									"raw": "{{appUrl}}/repository/collection/{{collection_4}}/token?_token={{token_create_collections}}",
									"host": [
										"{{appUrl}}"
									],
									"path": [
										"repository",
										"collection",
										"{{collection_4}}",
										"token"
									],
									"query": [
										{
											"key": "_token",
											"value": "{{token_create_collections}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete token previously added as allowed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "665a84b3-f318-4ebb-a394-61bcdae681d1",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Manually added token should be removed, so now there should be leaved only one token (that was added automatically during collection creation)\", function () {",
											"    pm.expect(jsonData.data.tokens_count).to.eql(1);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{appUrl}}/repository/collection/{{collection_4}}/token/{{token_other_to_add_as_allowed}}?_token={{token_create_collections}}",
									"host": [
										"{{appUrl}}"
									],
									"path": [
										"repository",
										"collection",
										"{{collection_4}}",
										"token",
										"{{token_other_to_add_as_allowed}}"
									],
									"query": [
										{
											"key": "_token",
											"value": "{{token_create_collections}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Backup upload",
					"item": [
						{
							"name": "Strategy: Delete oldest if collection is full",
							"item": [
								{
									"name": "Create a token that allows to create collections",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0fb68bc5-c302-4e99-b07f-44907e0de989",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"pm.globals.set(\"token_create_collections\", jsonData.tokenId);",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"roles\": [\n    \t\"collections.create_new\", \n    \t\"collections.add_tokens_to_allowed_collections\",\n    \t\"collections.upload_to_allowed_collections\",\n    \t\"collections.list_versions_for_allowed_collections\",\n    \t\"upload.backup\"\n    ],\n    \"data\": {\n        \"tags\": [\"user_uploads.u123\", \"user_uploads\"],\n        \"allowedMimeTypes\": [\"image/jpeg\", \"image/png\", \"image/gif\"],\n        \"maxAllowedFileSize\": 14579\n    }\n}\n"
										},
										"url": {
											"raw": "{{appUrl}}/auth/token/generate?_token=test-token-full-permissions",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"auth",
												"token",
												"generate"
											],
											"query": [
												{
													"key": "_token",
													"value": "test-token-full-permissions"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create collection where we will upload our versions #5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51b1b8a6-0321-417a-8adc-c0df05abf5ef",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"pm.test(\"Id is 36 length UUID\", function () {",
													"    pm.expect(jsonData.collection.id.length).to.eql(36);",
													"});",
													"",
													"pm.test(\"All fields are at its place\", function () {",
													"    pm.expect(jsonData.collection.max_backups_count).to.eql(2);",
													"    pm.expect(jsonData.collection.max_one_backup_version_size).to.eql(1000000);",
													"    pm.expect(jsonData.collection.max_collection_size).to.eql(5000000);",
													"    pm.expect(jsonData.collection.strategy).to.eql('delete_oldest_when_adding_new');",
													"    pm.expect(jsonData.collection.description).to.eql('Title: Solidarity with Postal Workers, Against State Repression!');",
													"});",
													"",
													"",
													"pm.globals.set(\"collection_5_to_upload_versions\", jsonData.collection.id);"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"maxBackupsCount\": 2,\n\t\"maxOneVersionSize\": \"1MB\",\n\t\"maxCollectionSize\": \"5MB\",\n\t\"strategy\": \"delete_oldest_when_adding_new\",\n\t\"description\": \"Title: Solidarity with Postal Workers, Against State Repression!\",\n\t\"password\": \"solidarity-forever\",\n\t\"filename\": \"solidarity-with-postal-workers-article\"\n}\n"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection?_token={{token_create_collections}}",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection"
											],
											"query": [
												{
													"key": "_token",
													"value": "{{token_create_collections}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload a backup (v1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4bc8e4e-fcec-43e3-96f6-f00a0262001a",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"It's a first version of the backup\", function () {",
													"    pm.expect(jsonData.version.version).to.eql(1);",
													"});",
													"",
													"pm.test(\"File has proper 'v1' in name\", function () {",
													"    pm.expect(jsonData.version.file.filename).to.contain('solidarity-with-postal-workers-article-v1');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "ZSP-lWA calls for a week of protest action against the repression of workers from the Post Office in Poland\n"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection/{{collection_5_to_upload_versions}}/backup?_token={{token_create_collections}}",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection",
												"{{collection_5_to_upload_versions}}",
												"backup"
											],
											"query": [
												{
													"key": "_token",
													"value": "{{token_create_collections}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload: Second time same file (v1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84008f5f-b7de-4922-858b-c5cecb160e05",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response informs about a fact that the backup was uploaded two times - is a duplicate of existing version\", function () {",
													"    pm.expect(jsonData.status).to.eql('backup_version_uploaded_twice');",
													"});",
													"",
													"pm.test(\"Duplication error has proper error code\", function () {",
													"    pm.expect(jsonData.error_code).to.eql(4008);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "ZSP-lWA calls for a week of protest action against the repression of workers from the Post Office in Poland\n"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection/{{collection_5_to_upload_versions}}/backup?_token={{token_create_collections}}",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection",
												"{{collection_5_to_upload_versions}}",
												"backup"
											],
											"query": [
												{
													"key": "_token",
													"value": "{{token_create_collections}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload: Second version - with a title in markdown (v2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06dc6f92-10cf-4002-a013-1a6317752807",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"It's a second version of the backup\", function () {",
													"    pm.expect(jsonData.version.version).to.eql(2);",
													"});",
													"",
													"pm.test(\"File has proper 'v2' in name\", function () {",
													"    pm.expect(jsonData.version.file.filename).to.contain('solidarity-with-postal-workers-article-v2');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "ZSP-lWA calls for a week of protest action against the repression of workers from the Post Office in Poland\n===========================================================================================================\n"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection/{{collection_5_to_upload_versions}}/backup?_token={{token_create_collections}}",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection",
												"{{collection_5_to_upload_versions}}",
												"backup"
											],
											"query": [
												{
													"key": "_token",
													"value": "{{token_create_collections}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify: There should be v1 and v2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d58dd8e4-dc0e-41fd-8d5c-4b0a0b534bcc",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"There are backups: v1 and v2\", function () {",
													"    let versions = \"\";",
													"    ",
													"    for (let versionIndex in jsonData.versions) {",
													"        let version = jsonData.versions[versionIndex];",
													"        ",
													"        versions += \" -> v\" + version.details.version;",
													"    }",
													"    ",
													"    pm.expect(versions).to.equal(' -> v1 -> v2');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection/{{collection_5_to_upload_versions}}/backup?_token={{token_create_collections}}",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection",
												"{{collection_5_to_upload_versions}}",
												"backup"
											],
											"query": [
												{
													"key": "_token",
													"value": "{{token_create_collections}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload: First version should be removed when (v3) last is uploaded",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29c55d54-4e2c-4b89-b828-0b4bdfc1aa4c",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"It's a second version of the backup\", function () {",
													"    pm.expect(jsonData.version.version).to.eql(3);",
													"});",
													"",
													"pm.test(\"File has proper 'v3' in name\", function () {",
													"    pm.expect(jsonData.version.file.filename).to.contain('solidarity-with-postal-workers-article-v3');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "ZSP-lWA calls for a week of protest action against the repression of workers from the Post Office in Poland\n===========================================================================================================\n\nFebruary 26 - March 4, 2018\n\nFor almost two years, postal workers around Poland have been protesting for better working conditions. ZSP has been active in attempts to coordinate national networks, actions and to unionize workers, together with hundreds of other workers spread around the country. All of the workers shared two things in common: they are fed up with the very poor working conditions and were not satisfied with the role of the representative unions which signed various agreements on their behalf with the employer.\n\nMajor actions of the ZSP have included exposing the problems in the Post Office and providing a forum for thousands of workers to network, making contacts all over the country and organizing national meetings, promoting alternative unionism and organizing and taking part in organizing national protests, together with thousands of workers.\n\nThis work was immediately attacked by representatives both of Solidarity and by the management of the Post Office, which is a state-owned enterprise. Solidarity at the Post Office carried out a vile disinformation campaign, which sought to present the ZSP as if it was a Soviet paramilitary organization ‚Äì such a grotesque misrepresentation that it would have been hilarious if it weren't such a part of the current far-right political hysteria.\n\nWhen workers began to organize and call for protests on a national level, calling for a significant pay rise and other demands, the management of the Post Office, together with their union servants, started a campaign of harrassment and threats against the workers. Throughout Poland, workers were visited, told that the protests were illegal, threatened with disciplinary action, etc.\n\nFinally, after last years' large national protests, Klaudiusz and Rafal were fired and now Zbyszek. He had been active after the protests in trying to organize workers.\n\nBesides this retaliation against the postal workers, there have also been various attempts to bring criminal cases against another member of ZSP from Warsaw, Jakub. The Post Office tried (unsuccessfully) to have him prosecuted under the amazing charge of ‚Äûorganizing a bloody revolution‚Äù. Although this was so stupid it was hysterical, it is actually a very serious charge, completely out of line with the real crime ‚Äì helping to coordinate the national workers protest. Unfortunately the Post Office, backed by the State, is trying to prosecute on lesser criminal charges, which are also complete nonsense.\n\nAlthough our organization has born the brunt of the repression, it is important to recognize that in fact, they are repressing all workers.\n\nIn connection with the recent round of repression, an international week of solidarity and protest has been called for Febuary 26 - March 4, with some protests planned at various representations of the Polish State around the globe. More information on planned protests to follow.\n\nIf you would like to show other forms of solidarity, please contact is@zsp.net.pl.\n\nRelated articles in English:\nhttp://zsp.net.pl/postal-workers-protest-warsaw\nzsp.net.pl/no-protest-allowed-post-office\nhttp://zsp.net.pl/postal-workers-protest-all-over-poland\nhttp://zsp.net.pl/solidarity-postal-workers-down-bosses\nzsp.net.pl/post-office-workers-make-demands\nhttp://zsp.net.pl/third-national-meeting-postal-workers-adopt-libertaria...\nhttp://zsp.net.pl/%E2%80%9Esolidarity%E2%80%9D-screws-postal-workers-aga...\n\nIn Polish:\nhttp://zsp.net.pl/kampanie/poczta-polska\nlistonosze.pl"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection/{{collection_5_to_upload_versions}}/backup?_token={{token_create_collections}}",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection",
												"{{collection_5_to_upload_versions}}",
												"backup"
											],
											"query": [
												{
													"key": "_token",
													"value": "{{token_create_collections}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify: v2 and v3 should be (v3 replaces v1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e11c76c-1854-4a88-a4c0-22700a70d11f",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"There are backups: v2 and v3\", function () {",
													"    let versions = \"\";",
													"    ",
													"    for (let versionIndex in jsonData.versions) {",
													"        let version = jsonData.versions[versionIndex];",
													"        ",
													"        versions += \" -> v\" + version.details.version;",
													"    }",
													"    ",
													"    pm.expect(versions).to.equal(' -> v2 -> v3');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection/{{collection_5_to_upload_versions}}/backup?_token={{token_create_collections}}",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection",
												"{{collection_5_to_upload_versions}}",
												"backup"
											],
											"query": [
												{
													"key": "_token",
													"value": "{{token_create_collections}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch recent version: v3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "887f7dce-a153-470d-a88d-559bdca9394f",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Content is full\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Major actions of the ZSP have included exposing the problems in the Post Office\");",
													"});",
													"",
													"pm.test(\"Content contains the beginning of the text\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"ZSP-lWA calls for a week of protest action against the repression of workers from the Post Office in Poland\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{appUrl}}/repository/collection/{{collection_5_to_upload_versions}}/backup/latest?password=solidarity-forever&_token={{token_create_collections}}",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection",
												"{{collection_5_to_upload_versions}}",
												"backup",
												"latest"
											],
											"query": [
												{
													"key": "password",
													"value": "solidarity-forever"
												},
												{
													"key": "_token",
													"value": "{{token_create_collections}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload: v3 should be already uploaded",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20206fd7-a235-4cf1-910e-9247da643fb9",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response informs about a fact that the backup was uploaded two times - is a duplicate of existing version\", function () {",
													"    pm.expect(jsonData.status).to.eql('backup_version_uploaded_twice');",
													"});",
													"",
													"pm.test(\"Duplication error has proper error code\", function () {",
													"    pm.expect(jsonData.error_code).to.eql(4008);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "ZSP-lWA calls for a week of protest action against the repression of workers from the Post Office in Poland\n===========================================================================================================\n\nFebruary 26 - March 4, 2018\n\nFor almost two years, postal workers around Poland have been protesting for better working conditions. ZSP has been active in attempts to coordinate national networks, actions and to unionize workers, together with hundreds of other workers spread around the country. All of the workers shared two things in common: they are fed up with the very poor working conditions and were not satisfied with the role of the representative unions which signed various agreements on their behalf with the employer.\n\nMajor actions of the ZSP have included exposing the problems in the Post Office and providing a forum for thousands of workers to network, making contacts all over the country and organizing national meetings, promoting alternative unionism and organizing and taking part in organizing national protests, together with thousands of workers.\n\nThis work was immediately attacked by representatives both of Solidarity and by the management of the Post Office, which is a state-owned enterprise. Solidarity at the Post Office carried out a vile disinformation campaign, which sought to present the ZSP as if it was a Soviet paramilitary organization ‚Äì such a grotesque misrepresentation that it would have been hilarious if it weren't such a part of the current far-right political hysteria.\n\nWhen workers began to organize and call for protests on a national level, calling for a significant pay rise and other demands, the management of the Post Office, together with their union servants, started a campaign of harrassment and threats against the workers. Throughout Poland, workers were visited, told that the protests were illegal, threatened with disciplinary action, etc.\n\nFinally, after last years' large national protests, Klaudiusz and Rafal were fired and now Zbyszek. He had been active after the protests in trying to organize workers.\n\nBesides this retaliation against the postal workers, there have also been various attempts to bring criminal cases against another member of ZSP from Warsaw, Jakub. The Post Office tried (unsuccessfully) to have him prosecuted under the amazing charge of ‚Äûorganizing a bloody revolution‚Äù. Although this was so stupid it was hysterical, it is actually a very serious charge, completely out of line with the real crime ‚Äì helping to coordinate the national workers protest. Unfortunately the Post Office, backed by the State, is trying to prosecute on lesser criminal charges, which are also complete nonsense.\n\nAlthough our organization has born the brunt of the repression, it is important to recognize that in fact, they are repressing all workers.\n\nIn connection with the recent round of repression, an international week of solidarity and protest has been called for Febuary 26 - March 4, with some protests planned at various representations of the Polish State around the globe. More information on planned protests to follow.\n\nIf you would like to show other forms of solidarity, please contact is@zsp.net.pl.\n\nRelated articles in English:\nhttp://zsp.net.pl/postal-workers-protest-warsaw\nzsp.net.pl/no-protest-allowed-post-office\nhttp://zsp.net.pl/postal-workers-protest-all-over-poland\nhttp://zsp.net.pl/solidarity-postal-workers-down-bosses\nzsp.net.pl/post-office-workers-make-demands\nhttp://zsp.net.pl/third-national-meeting-postal-workers-adopt-libertaria...\nhttp://zsp.net.pl/%E2%80%9Esolidarity%E2%80%9D-screws-postal-workers-aga...\n\nIn Polish:\nhttp://zsp.net.pl/kampanie/poczta-polska\nlistonosze.pl"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection/{{collection_5_to_upload_versions}}/backup?_token={{token_create_collections}}",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection",
												"{{collection_5_to_upload_versions}}",
												"backup"
											],
											"query": [
												{
													"key": "_token",
													"value": "{{token_create_collections}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload: v1 can be uploaded again as v3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4abdc8a1-da6c-427b-a115-874225abbb13",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"It's a first version of the backup\", function () {",
													"    pm.expect(jsonData.version.version).to.eql(4);",
													"});",
													"",
													"pm.test(\"File has proper 'v4' in name\", function () {",
													"    pm.expect(jsonData.version.file.filename).to.contain('solidarity-with-postal-workers-article-v4');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "ZSP-lWA calls for a week of protest action against the repression of workers from the Post Office in Poland\n"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection/{{collection_5_to_upload_versions}}/backup?_token={{token_create_collections}}",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection",
												"{{collection_5_to_upload_versions}}",
												"backup"
											],
											"query": [
												{
													"key": "_token",
													"value": "{{token_create_collections}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify: v1 was uploaded again, now it's last as v4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52011ae8-f36c-44c5-a294-c7fffc0b01e4",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"There are backups: v3 and v4\", function () {",
													"    let versions = \"\";",
													"    ",
													"    for (let versionIndex in jsonData.versions) {",
													"        let version = jsonData.versions[versionIndex];",
													"        ",
													"        versions += \" -> v\" + version.details.version;",
													"    }",
													"    ",
													"    pm.expect(versions).to.equal(' -> v3 -> v4');",
													"});",
													"",
													"pm.globals.set(\"postal_workers_article_v3\", jsonData.versions['3'].url);",
													"pm.globals.set(\"postal_workers_article_v4\", jsonData.versions['4'].url);",
													"pm.globals.set(\"postal_workers_article_v4_id\", jsonData.versions['4'].details.id);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection/{{collection_5_to_upload_versions}}/backup?_token={{token_create_collections}}",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection",
												"{{collection_5_to_upload_versions}}",
												"backup"
											],
											"query": [
												{
													"key": "_token",
													"value": "{{token_create_collections}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify content: v3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea6e61c7-c559-41b9-ac65-e18d137b2fb5",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Content contains a snippet from submitted file\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Major actions of the ZSP have included exposing the problems in the Post Office\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{postal_workers_article_v3}}?password=solidarity-forever",
											"host": [
												"{{postal_workers_article_v3}}"
											],
											"query": [
												{
													"key": "password",
													"value": "solidarity-forever"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify content: v4 (resubmitted v1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6645ebc-edbf-4c68-a0d4-ee3ba13be2bc",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Content is shorter, as this is an earlier version - v1\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Major actions of the ZSP have included exposing the problems in the Post Office\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{postal_workers_article_v4}}?password=solidarity-forever",
											"host": [
												"{{postal_workers_article_v4}}"
											],
											"query": [
												{
													"key": "password",
													"value": "solidarity-forever"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch recent version: v4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd7a4b0b-81e7-4896-ae37-2ec64fb6f0c9",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Content is shorter, as this is an earlier version - v1\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Major actions of the ZSP have included exposing the problems in the Post Office\");",
													"});",
													"",
													"pm.test(\"Content contains the beginning of the text\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"ZSP-lWA calls for a week of protest action against the repression of workers from the Post Office in Poland\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{appUrl}}/repository/collection/{{collection_5_to_upload_versions}}/backup/latest?password=solidarity-forever&_token={{token_create_collections}}",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection",
												"{{collection_5_to_upload_versions}}",
												"backup",
												"latest"
											],
											"query": [
												{
													"key": "password",
													"value": "solidarity-forever"
												},
												{
													"key": "_token",
													"value": "{{token_create_collections}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch: v3 by version number",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9a1f4bd-33d9-449f-8d62-69d149e154a5",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Content contains what has v3 but v4 does not have\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Major actions of the ZSP have included exposing the problems in the Post Office\");",
													"});",
													"",
													"pm.test(\"Content contains the beginning of the text\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"ZSP-lWA calls for a week of protest action against the repression of workers from the Post Office in Poland\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{appUrl}}/repository/collection/{{collection_5_to_upload_versions}}/backup/v3?password=solidarity-forever&_token={{token_create_collections}}",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection",
												"{{collection_5_to_upload_versions}}",
												"backup",
												"v3"
											],
											"query": [
												{
													"key": "password",
													"value": "solidarity-forever"
												},
												{
													"key": "_token",
													"value": "{{token_create_collections}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch: v4 by UUID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86a3ff4a-7f02-45ec-b2ff-d09a9e9dd032",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"It's a v1 version uploaded as v4, so it does not have all of the text\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Major actions of the ZSP have included exposing the problems in the Post Office\");",
													"});",
													"",
													"pm.test(\"Content contains the beginning of the text\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"ZSP-lWA calls for a week of protest action against the repression of workers from the Post Office in Poland\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{appUrl}}/repository/collection/{{collection_5_to_upload_versions}}/backup/{{postal_workers_article_v4_id}}?password=solidarity-forever&_token={{token_create_collections}}",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection",
												"{{collection_5_to_upload_versions}}",
												"backup",
												"{{postal_workers_article_v4_id}}"
											],
											"query": [
												{
													"key": "password",
													"value": "solidarity-forever"
												},
												{
													"key": "_token",
													"value": "{{token_create_collections}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Strategy: Alert when collection is full + manual deletion",
							"item": [
								{
									"name": "Create a token that allows to create collections",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0fb68bc5-c302-4e99-b07f-44907e0de989",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"pm.globals.set(\"token_create_collections\", jsonData.tokenId);",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"roles\": [\n    \t\"collections.create_new\", \n    \t\"collections.upload_to_allowed_collections\",\n    \t\"collections.delete_versions_for_allowed_collections\",\n    \t\"collections.list_versions_for_allowed_collections\",\n    \t\"upload.backup\"\n    ],\n    \"data\": {\n        \"tags\": [\"user_uploads.u123\", \"user_uploads\"],\n        \"allowedMimeTypes\": [\"image/jpeg\", \"image/png\", \"image/gif\"],\n        \"maxAllowedFileSize\": 14579\n    }\n}\n"
										},
										"url": {
											"raw": "{{appUrl}}/auth/token/generate?_token=test-token-full-permissions",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"auth",
												"token",
												"generate"
											],
											"query": [
												{
													"key": "_token",
													"value": "test-token-full-permissions"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create collection where we will upload our versions #5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c1ac998-a6d6-4ac2-a419-3a74898082a5",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"pm.test(\"Id is 36 length UUID\", function () {",
													"    pm.expect(jsonData.collection.id.length).to.eql(36);",
													"});",
													"",
													"pm.test(\"All fields are at its place\", function () {",
													"    pm.expect(jsonData.collection.max_backups_count).to.eql(2);",
													"    pm.expect(jsonData.collection.max_one_backup_version_size).to.eql(1000000);",
													"    pm.expect(jsonData.collection.max_collection_size).to.eql(5000000);",
													"    pm.expect(jsonData.collection.strategy).to.eql('alert_when_backup_limit_reached');",
													"    pm.expect(jsonData.collection.description).to.eql('Title: Brighton Solidarity Federation: the first five months of 2018');",
													"});",
													"",
													"",
													"pm.globals.set(\"collection_5_to_upload_versions\", jsonData.collection.id);"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"maxBackupsCount\": 2,\n\t\"maxOneVersionSize\": \"1MB\",\n\t\"maxCollectionSize\": \"5MB\",\n\t\"strategy\": \"alert_when_backup_limit_reached\",\n\t\"description\": \"Title: Brighton Solidarity Federation: the first five months of 2018\",\n\t\"password\": \"solfed\",\n\t\"filename\": \"solfed-2018-activity-till-may\"\n}\n"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection?_token={{token_create_collections}}",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection"
											],
											"query": [
												{
													"key": "_token",
													"value": "{{token_create_collections}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload a backup (v1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ed25af1-ab6a-4932-b7a8-aaf2ae61d898",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"It's a first version of the backup\", function () {",
													"    pm.expect(jsonData.version.version).to.eql(1);",
													"});",
													"",
													"pm.test(\"File has proper 'v1' in name\", function () {",
													"    pm.expect(jsonData.version.file.filename).to.contain('solfed-2018-activity-till-may-v1');",
													"});",
													"",
													"pm.globals.set(\"solfed_article_v1\", jsonData.version.id);",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "Brighton Solidarity Federation: the first five months of 2018\n\n"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection/{{collection_5_to_upload_versions}}/backup?_token={{token_create_collections}}",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection",
												"{{collection_5_to_upload_versions}}",
												"backup"
											],
											"query": [
												{
													"key": "_token",
													"value": "{{token_create_collections}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload: Second version",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3887923d-89f7-41ea-9f97-3ea27b98f9f2",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"It's a second version of the backup\", function () {",
													"    pm.expect(jsonData.version.version).to.eql(2);",
													"});",
													"",
													"pm.test(\"File has proper 'v2' in name\", function () {",
													"    pm.expect(jsonData.version.file.filename).to.contain('solfed-2018-activity-till-may-v2');",
													"});",
													"",
													"pm.globals.set(\"solfed_article_v2\", jsonData.version.id);",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "Brighton Solidarity Federation: the first five months of 2018\n=============================================================\n\nA summary of the activity of Brighton Solfed in the start of 2018, showcasing the cases we've dealt with up to May.\nAfter a busy 2017, ending with a string of victories, 2018 looks set to be even busier for Brighton Solidarity Federation. In the first 5 months of the year, we‚Äôve had many cases, both with our housing union and workplace disputes.\n\nWith a task as huge as that which we‚Äôve set ourselves, it always seems like there‚Äôs more to do, and so it‚Äôs often easy for our disputes along the way to be forgotten. With this in mind, we felt it important to catalogue and bring attention to some of our results so far ‚Äì if only to show that when we fight back against rip off landlords and exploitative bosses, we can win.\nThe year began with a successful end to our long running case against Caf√© Plenty, which saw several pickets at the end of last year (we haven‚Äôt had time to write up this case yet, but here are articles from earlier in the dispute , resulting in the best part of the ¬£7500 in unpaid wages going to the worker. This set the scene for the year to go on!\n\nAs well as Caf√© Plenty, we carried over 2 cases from 2017 ‚Äì first was a housing case against G4 Lets , which we concluded less successfully in March ‚Äì tenants felt at this point the research that accompanied our campaign, which proved the agency had ignored a council environmental health report would give them enough leverage that going down a legalistic route as opposed to a direct action one, would have a higher chance of success. At this point we wished them well in their new direction. Coming out of this, a well attended housing rights workshop specifically aimed at other G4 Lets tenants (G4Lets are one of the larger student letting agents in the city) was organised with the support of the tenants. Since concluding the dispute, we have been approached by several G4 Lets tenants for advice, a group of which were able to get back part of their deposit.\n\nThe other case we carried on from 2017 was against Youngs. This case involved tenant, who due to major damp issues was unable to use his bedroom for months, and had spent significant amounts of money and time repairing the damage, with the promise that this would be refunded. This case has been a major focus of the local this year so far ‚Äì in January we held a march on the agency as a show of strength against this treatment. The case is currently ongoing, with major escalations on the part of the agency and landlord including an attempt at revenge eviction of the tenant , and recently violence from the agent against solfed members. Solfed have extended the campaign to Halls letting agents, who rent Youngs their office, demanding they evict the evictors. We are determined to show we can‚Äôt be bullied down, and the campaign continues, intensified. More information on the case can be found here and an interview with the tenant can be found here .\n\nAlongside these major cases, we‚Äôve had a number of shorter cases throughout the year. In February we opened a dispute with one of Brighton‚Äôs more corporate lettings agencies after part of a tenant‚Äôs deposit was withheld, alongside other issues. Despite attempts by the agency to threaten us legally, our escalating campaign had the desired result, with the tenant getting the money she wanted.\n\nWe also had a series of shorter cases ‚Äì winning ¬£1200 in unpaid wages from a sushi restaurant after a single picket, winning against a major hotel chain again after one picket (dispute not yet written up ‚Äì we just won last week!) and over ¬£1000 owed from a local dry cleaning firm, with just the threat of a picket.\n\nHowever our goal is more than just helping individuals and winning cases: as an anarcho-syndicalist union, we want to build a culture of solidarity and resistance amongst working class people. Every dispute that ends in success takes us closer to that goal because it shows that when we stand up to bosses and landlords, we can win. But disputes that are not a clear-cut victory - such as the G4 Lets campaign - are important in building that culture of solidarity and resistance too: they send a strong signal to lettings agencies that even in difficult cases we are prepared to campaign for months. It is through fighting back regardless of the prospect of winning that we are beginning to change what landlords and bosses can get away with in Brighton - and nothing is more gratifying than the emails we occasionally receive of tenants or workers telling us that they were able to resolve a housing or workplace problem by threatening to approach SolFed for support.\nAlongside all of this, we‚Äôve also held a series of fundraisers, a regular series of film showings (sub.media‚Äôs Trouble series) - and we are continuing to grow our membership. Our members continue to organise in their own workplaces, often able to use the skills, confidence and tactics we‚Äôve developed in these cases into our own cases to build long term workplace strength, and a culture of collectively standing up to improve our conditions.\n\nAll in all, we think it bodes pretty well for the rest of the year, as we continue to make anarcho-syndicalism a reality in Brighton, and take the fight to the bosses and landlords ‚Äì we aren‚Äôt going anywhere, and we aren‚Äôt stopping any time soon!\n"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection/{{collection_5_to_upload_versions}}/backup?_token={{token_create_collections}}",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection",
												"{{collection_5_to_upload_versions}}",
												"backup"
											],
											"query": [
												{
													"key": "_token",
													"value": "{{token_create_collections}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify: There should be v1 and v2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d58dd8e4-dc0e-41fd-8d5c-4b0a0b534bcc",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"There are backups: v1 and v2\", function () {",
													"    let versions = \"\";",
													"    ",
													"    for (let versionIndex in jsonData.versions) {",
													"        let version = jsonData.versions[versionIndex];",
													"        ",
													"        versions += \" -> v\" + version.details.version;",
													"    }",
													"    ",
													"    pm.expect(versions).to.equal(' -> v1 -> v2');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection/{{collection_5_to_upload_versions}}/backup?_token={{token_create_collections}}",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection",
												"{{collection_5_to_upload_versions}}",
												"backup"
											],
											"query": [
												{
													"key": "_token",
													"value": "{{token_create_collections}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload: There should be an alert, that the collection is FULL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ac2a0d6-499e-478e-bd0f-340f7788426f",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"There should be an alert that we cannot upload more backups\", function () {",
													"    pm.expect(jsonData.status).to.eql('max_backups_count_too_many');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "Some other version of that text"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection/{{collection_5_to_upload_versions}}/backup?_token={{token_create_collections}}",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection",
												"{{collection_5_to_upload_versions}}",
												"backup"
											],
											"query": [
												{
													"key": "_token",
													"value": "{{token_create_collections}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete: v1 to make space to create next version",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3545739f-6afa-4500-ac31-7a515d0f4513",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// pm.test(\"It's a first version of the backup\", function () {",
													"//     pm.expect(jsonData.version.version).to.eql(1);",
													"// });",
													"",
													"// pm.test(\"File has proper 'v1' in name\", function () {",
													"//     pm.expect(jsonData.version.file.filename).to.contain('solfed-2018-activity-till-may-v1');",
													"// });",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{appUrl}}/repository/collection/{{collection_5_to_upload_versions}}/backup/{{solfed_article_v1}}?_token={{token_create_collections}}",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection",
												"{{collection_5_to_upload_versions}}",
												"backup",
												"{{solfed_article_v1}}"
											],
											"query": [
												{
													"key": "_token",
													"value": "{{token_create_collections}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify: There should be just v2, as we deleted v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88a44965-356c-4057-902b-361304bb1845",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"There are backups: v1 and v2\", function () {",
													"    let versions = \"\";",
													"    ",
													"    for (let versionIndex in jsonData.versions) {",
													"        let version = jsonData.versions[versionIndex];",
													"        ",
													"        versions += \" -> v\" + version.details.version;",
													"    }",
													"    ",
													"    pm.expect(versions).to.equal(' -> v2');",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection/{{collection_5_to_upload_versions}}/backup?_token={{token_create_collections}}",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection",
												"{{collection_5_to_upload_versions}}",
												"backup"
											],
											"query": [
												{
													"key": "_token",
													"value": "{{token_create_collections}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete: v2 to make the collection empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "027f572b-84dc-404b-9da1-165c10df967a",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "Brighton Solidarity Federation: the first five months of 2018\n\n"
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection/{{collection_5_to_upload_versions}}/backup/{{solfed_article_v2}}?_token={{token_create_collections}}",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection",
												"{{collection_5_to_upload_versions}}",
												"backup",
												"{{solfed_article_v2}}"
											],
											"query": [
												{
													"key": "_token",
													"value": "{{token_create_collections}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify: There are no versions in the collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d141f66-1315-4036-b720-9b663604f7cc",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"There should be no backups available\", function () {",
													"    pm.expect(jsonData.versions.length).to.equal(0);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{appUrl}}/repository/collection/{{collection_5_to_upload_versions}}/backup?_token={{token_create_collections}}",
											"host": [
												"{{appUrl}}"
											],
											"path": [
												"repository",
												"collection",
												"{{collection_5_to_upload_versions}}",
												"backup"
											],
											"query": [
												{
													"key": "_token",
													"value": "{{token_create_collections}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "54923059-f515-450d-bbd7-6efb1b0a448b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ff3e4774-e4e0-4e19-bb5f-4968f4934186",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "85fbbe4d-e82b-4d62-b318-7f1de7cef9ae",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4fd2ca93-ff20-4830-9189-315c46ea61bb",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "e1200f8d-e3d0-4dd5-aa14-f5054fb10b06",
			"key": "appUrl",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
}