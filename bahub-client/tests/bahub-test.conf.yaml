
accesses:
    backup_one:
        url: http://filerepository
        token: "${SECURITY_ADMIN_TOKEN}"

encryption:
    none:
        passphrase: ""
        method: ""

    aes:
        method: "aes-256-cbc"
        passphrase: "IYrVfkKIA3i4VzKwWYyZtIKXvIp5aYL3AoyZFr3fsYSHrpq2Utif4b+Zt23nAUFx"
        salt: "sKEjp6otKDwPi3jN4rfSS5kZinX/jvswA+Gq9vQsSkkZ+Ygmzr2MmOBuQcvV6m"
        rounds: 16000

backups:
    docker_hot_volumes_example:
        type: docker_hot_volumes
        container: "fr_tests_bahub_test_www_1"
        access: backup_one
        encryption: none
        collection_id: "${COLLECTIONS_WWW_FILES_ID}"
        paths:
            - /var/www
            - /var/log

    www_docker_offline:
        type: docker_volumes
        container: "fr_tests_bahub_test_www_1"
        access: backup_one
        encryption: none
        collection_id: "${COLLECTIONS_WWW_FILES_ID}"
        paths:
            - /var/log

        # optional
        docker_bin: "sudo docker"
        tar_pack_cmd: "tar -czf %stdin% %paths%"
        tar_unpack_cmd: "tar -xzf %stdin% %target%"
        temp_image_name: "alpine:3.9"
        temp_image_cmd: "apk add --update xz bzip2 && sleep 3600"

    mysql_native_single_database:
        type: mysql
        host: "fr_tests_bahub_test_mariadb_1"
        port: 3306
        user: root
        password: root
        database: "test_www_db"
        access: backup_one
        encryption: none
        collection_id: "${COLLECTIONS_MYSQL_ID}"

    mysql_all_databases:
        type: mysql
        host: "fr_tests_bahub_test_mariadb_1"
        port: 3306
        user: root
        password: root
        database: ""
        access: backup_one
        encryption: none
        collection_id: "${COLLECTIONS_MYSQL_ID}"

    mysql_docker_single_database:
        type: mysql
        host: localhost
        port: 3306
        user: root
        password: root
        database: "test_www_db"
        container: "fr_tests_bahub_test_mariadb_1"     # this one is required to use a docker container
        access: backup_one
        encryption: none
        collection_id: "${COLLECTIONS_MYSQL_ID}"

    docker_command_output:
        type: docker_output
        container: "fr_tests_bahub_test_www_1"
        command: "cat /etc/fstab"
        restore_command: "cat - > /tmp/fstab.restored"
        access: backup_one
        encryption: none
        collection_id: "${COLLECTIONS_WWW_FILES_ID}"

    # no container specified: operates on Bahub container or on host (depends on where Bahub is running)
    local_command_output:
        type: command_output
        command: "cat /etc/fstab"
        restore_command: "cat - > /tmp/fstab.restored"
        access: backup_one
        encryption: none
        collection_id: "${COLLECTIONS_WWW_FILES_ID}"

    # no container specified: operates on Bahub container or on host (depends on where Bahub is running)
    some_local_logs:
        type: directory
        paths:
            - "/tmp/temp-backup"
        access: backup_one
        encryption: none
        collection_id: "${COLLECTIONS_WWW_FILES_ID}"

    postgresql_docker_single:
        type: postgres
        host: "test_postgres"
        user: riotkit
        port: 5432
        password: "cooperative-economy"
        database: "for_the_people"
        container: "fr_tests_bahub_test_postgres_1"
        access: backup_one
        encryption: none
        collection_id: "${COLLECTIONS_POSTGRES_SINGLE_DB_ID}"

recoveries:
    default:
        policy: restore-whats-possible
        definitions: all

    plan_2:
        policy: restore-whats-possible
        definitions:
            - local_command_output
