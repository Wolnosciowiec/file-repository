#
## Build stage container: Build frontend
#
FROM quay.io/riotkit/php-app:7.4-x86_64 as builder

ADD package.json /var/www/html/
ADD package-lock.json /var/www/html/
ADD requirements.txt /var/www/html/

RUN pip3 install -r /var/www/html/requirements.txt

# @todo: Frontend installation there

#
## Destination container: Backend + built container from previous stage
#
FROM quay.io/riotkit/php-app:7.4-x86_64

RUN apk add --update curl bash gnupg netcat-openbsd libzip python3

ENV DATABASE_URL=postgres://postgres:postgres@postgres:5432/postgres \
    FS_ADAPTER=local \
    FS_LOCAL_DIRECTORY=%kernel.root_dir%/../var/uploads \
    FS_LOCAL_LAZY=1 \
    FS_LOCAL_WRITEFLAGS= \
    FS_LOCAL_LINKHANDLING= \
    FS_LOCAL_PERMISSIONS= \
    FS_AWSS3V3_CLIENT=s3_client \
    FS_AWSS3V3_BUCKET=misc \
    FS_AWSS3V3_PREFIX= \
    FS_AWSS3V3_OPTIONS_ENDPOINT=http://s3:9000 \
    FS_AWSS3V3_VERSION=latest \
    FS_AWSS3V3_REGION=eu-central-1 \
    FS_AWSS3V3_KEY=some-key \
    FS_AWSS3V3_SECRET=some-secret \
    TOKEN_EXPIRATION_TIME="+30 minutes" \
    TEMP_DIRECTORY=/tmp \
    ENC_SALT=default-change-me \
    APP_DOMAIN= \
    API_TESTS=false \
    HTTP_TIMEOUT=30 \
    BACKUP_ONE_VERSION_MAX_SIZE=4GB \
    BACKUP_COLLECTION_MAX_SIZE=15GB \
    READ_ONLY=false \
    HEALTH_CHECK_CODE= \
    PHP_MEMORY_LIMIT=256M \
    PHP_UPLOAD_MAX_FILESIZE=15G \
    PHP_POST_MAX_SIZE=15G \
    # Executes on each container run, after install/upgrade of the application
    POST_INSTALL_CMD="" \
    TZ="UTC" \
    POST_INSTALL_CMD="" \
    CACHE_ADAPTER_TYPE="cache.adapter.filesystem" \
    CACHE_REDIS_URL="redis://localhost" \
    CACHE_MEMCACHED_PROVIDER="memcached://localhost"

COPY . /var/www/html
#COPY --from=builder /var/www/html/public /var/www/html/
ADD .infrastructure/container-files/entrypoint/entrypoint.d/*.sh /entrypoint.d/
ADD .infrastructure/container-files/healthcheck.sh /

RUN set -x \
    && cd /var/www/html \
    && rm -rf var/cache/* \
    && rm -rf var/log/* \
    && rm -rf var/uploads/* \
    && rm -f var/*.db \
    && cp .env.dist .env \
    \
    # NGINX configuration
    && cp /var/www/html/.infrastructure/container-files/nginx/nginx.conf /etc/nginx/nginx.conf \
    \
    # Application permissions and general scripts setup
    && chown www-data:www-data /var/www -R \
    && su www-data -s /bin/bash -c "composer install --no-dev" \
    && chown www-data:www-data /var/www -R \
    && chmod +x /healthcheck.sh \
    && apt-get update \
    && apt-get install -y mariadb-client

WORKDIR "/var/www/html"

HEALTHCHECK --interval=30s --timeout=3s CMD /healthcheck.sh || exit 1
