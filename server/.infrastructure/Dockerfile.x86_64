#
## Build stage container: Build frontend
#
FROM quay.io/riotkit/php-app:7.4-x86_64 as builder

ADD server/Makefile /var/www/html/
ADD server/package.json /var/www/html/
ADD server/package-lock.json /var/www/html/

RUN rm -rf /var/lib/apt/lists/* \
    && apt-get update \
    && curl -sL https://deb.nodesource.com/setup_12.x | bash - \
    && apt-get install -y nodejs make gcc g++ \
    && chown -R www-data:www-data /var/www \
    && cd /var/www/html \
    && su www-data -s /bin/bash -c "make install_frontend" \
    \
    && cd /var/www/html \
    && apt-get remove -y gcc g++ \
    && apt-get clean \
    && rm -rf docs examples var/cache/* var/log/* var/data.db client

#
## Destination container: Backend + built container from previous stage
#
FROM quay.io/riotkit/php-app:7.4-x86_64

RUN rm -rf /var/lib/apt/lists/* \
    && apt-get update \
    && apt-get install -y curl bash gnupg2 netcat libzip4 python3 \
    && apt-get autoremove -y \
    && apt-get clean

ENV DATABASE_URL=sqlite:///%kernel.project_dir%/var/data.db \
    FS_ADAPTER=local \
    FS_LOCAL_DIRECTORY=%kernel.root_dir%/../var/uploads \
    FS_LOCAL_LAZY=1 \
    FS_LOCAL_WRITEFLAGS= \
    FS_LOCAL_LINKHANDLING= \
    FS_LOCAL_PERMISSIONS= \
    FS_AWSS3V3_CLIENT=s3_client \
    FS_AWSS3V3_BUCKET=misc \
    FS_AWSS3V3_PREFIX= \
    FS_AWSS3V3_OPTIONS_ENDPOINT=http://localhost:9000 \
    FS_AWSS3V3_VERSION=latest \
    FS_AWSS3V3_REGION=eu-central-1 \
    FS_AWSS3V3_KEY=some-key \
    FS_AWSS3V3_SECRET=some-secret \
    FS_FTP_HOST=localhost \
    FS_FTP_PORT=21 \
    FS_FTP_USERNAME=user \
    FS_FTP_PASSWORD=password \
    FS_FTP_ROOT=/ \
    FS_FTP_SSL=1 \
    FS_FTP_TIMEOUT=120 \
    FS_FTP_PERMPRIVATE= \
    FS_FTP_PERMPUBLIC= \
    FS_FTP_PASSIVE=0 \
    TOKEN_EXPIRATION_TIME="+30 minutes" \
    TEMP_DIRECTORY=/tmp \
    ENC_TOKEN_PHRASE=test123 \
    ENC_SALT=default-change-me \
    APP_DOMAIN= \
    API_TESTS=false \
    HTTP_TIMEOUT=30 \
    BACKUP_ONE_VERSION_MAX_SIZE=4GB \
    BACKUP_COLLECTION_MAX_SIZE=15GB \
    ANTI_HOTLINK_PROTECTION_ENABLED=true \
    ANTI_HOTLINK_RESTRICT_REGULAR_URLS=false \
    ANTI_HOTLINK_URL=/stream/{accessToken}/{expirationTime}/{fileId} \
    ANTI_HOTLINK_CRYPTO=md5 \
    ANTI_HOTLINK_SECRET_METHOD="\$http_x_expiration_time\$filename\$http_remote_addr MY-AWESOME-SUFFIX" \
    READ_ONLY=false \
    HEALTH_CHECK_CODE= \
    PHP_MEMORY_LIMIT=256M \
    PHP_UPLOAD_MAX_FILESIZE=15G \
    PHP_POST_MAX_SIZE=15G \
    # Executes on each container run, after install/upgrade of the application
    POST_INSTALL_CMD="" \
    TZ="UTC" \
    POST_INSTALL_CMD="" \
    CACHE_ADAPTER_TYPE="cache.adapter.filesystem" \
    CACHE_REDIS_URL="redis://localhost" \
    CACHE_MEMCACHED_PROVIDER="memcached://localhost" \
    ENC_ALGORITHM=aes-256-cbc \
    ENC_DIGEST_ALGORITHM=sha512 \
    ENC_DIGEST_ROUNDS=6000

COPY server /var/www/html
COPY --from=builder /var/www/html/public /var/www/html/
ADD server/.infrastructure/container-files/entrypoint/entrypoint.d/*.sh /entrypoint.d/
ADD server/.infrastructure/container-files/healthcheck.sh /

RUN cd /var/www/html \
    && rm -rf var/cache/* \
    && rm -rf var/log/* \
    && rm -rf var/uploads/* \
    && rm -f var/*.db \
    && cp .env.dist .env \
    \
    # NGINX configuration
    && cp /var/www/html/.infrastructure/container-files/nginx/nginx.conf /etc/nginx/nginx.conf \
    \
    # Application permissions and general scripts setup
    && chown www-data:www-data /var/www -R \
    && su www-data -s /bin/bash -c "composer install --no-dev" \
    && chown www-data:www-data /var/www -R \
    && chmod +x /healthcheck.sh \
    && apt-get update \
    && apt-get install -y mariadb-client

WORKDIR "/var/www/html"

HEALTHCHECK --interval=30s --timeout=3s CMD /healthcheck.sh || exit 1
