# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    env(BACKUP_MAX_VERSIONS): '5'
    env(BACKUP_ONE_VERSION_MAX_SIZE): '25MB'
    env(BACKUP_COLLECTION_MAX_SIZE): '125MB'
    locale: 'en'
    env(READ_ONLY): false
    env(HEALTH_CHECK_CODE): ''
    env(LONG_EXECUTION_TIME): "600"
    env(BASE_URL): ''
    env(PASSWD_ALGORITHM): 'sha256'
    env(PASSWD_ITERATIONS): '90000'
    env(JWT_LIFETIME): '2 hours'
    revproxy_storage_dir: '%env(resolve:REVPROXY_STORAGE_DIR)%'
    temp_directory: '%env(resolve:TEMP_DIRECTORY)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Kernel.php,Domain/*/Entity,Domain/*/SharedEntity,Domain/*/ValueObject,Migrations,Domain/Common/Service/Bus/*,Domain/*/Context,Domain/*/Exception,Domain/*/Form,Domain/*/Parameters,Domain/*/Response,Domain/*/Security}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\Domain\Technical\ActionHandler\HealthCheckHandler:
        autowire: true
        arguments:
            $secretCode: '%env(HEALTH_CHECK_CODE)%'

    App\Infrastructure\Common\Service\SerializerORMEntityNormalizer:
        public: false
        autowire: true
        autoconfigure: true
        tags:
            - { name: serializer.normalizer }

    datetime_normalizer:
        class: Symfony\Component\Serializer\Normalizer\DateTimeNormalizer
        public: false
        tags: [ serializer.normalizer ]

    App\Infrastructure\Authentication\Event\Subscriber\DevelopmentTokenSubscriber:
        autowire: true
        autoconfigure: true
        arguments:
            $isDev: '%kernel.debug%'

    App\Infrastructure\Common\Event\Subscriber\ErrorFormattingSubscriber:
        autowire: true
        autoconfigure: true
        arguments:
            $isDev: '%kernel.debug%'
            $envName: '%kernel.environment%'
            $logger: '@monolog.logger'

    App\Infrastructure\Common\Event\Subscriber\CorsSubscriber:
        autowire: true
        autoconfigure: true
        arguments:
            $isDev: '%kernel.debug%'

    App\Domain\Storage\Repository\StagingAreaRepository:
        class: App\Domain\Storage\Repository\StagingAreaRepository
        arguments:
            $tempPath: '%temp_directory%'

    App\Domain\Backup\Settings\BackupSettings:
        class: App\Domain\Backup\Settings\BackupSettings
        arguments:
            $maxBackupsCountPerCollection: '%env(BACKUP_MAX_VERSIONS)%'
            $maxOneBackupVersionSize: '%env(BACKUP_ONE_VERSION_MAX_SIZE)%'
            $maxWholeCollectionSize: '%env(BACKUP_COLLECTION_MAX_SIZE)%'

    App\Infrastructure\Backup\Repository\CollectionDoctrineRepository:
        autowire: true
        arguments:
            $readOnly: '%env(bool:READ_ONLY)%'

    App\Infrastructure\Backup\Repository\UserAccessDoctrineRepository:
        autowire: true
        arguments:
            $readOnly: '%env(bool:READ_ONLY)%'

    App\Infrastructure\Storage\Repository\FileDoctrineRepository:
        autowire: true
        arguments:
            $readOnly: '%env(bool:READ_ONLY)%'

    App\Infrastructure\Backup\Repository\StorageDoctrineRepository:
        autowire: true
        arguments:
            $readOnly: '%env(bool:READ_ONLY)%'

    App\Infrastructure\Storage\Repository\TagsDoctrineRepository:
        autowire: true
        arguments:
            $readOnly: '%env(bool:READ_ONLY)%'

    App\Infrastructure\Authentication\Repository\UserDoctrineRepository:
        autowire: true
        arguments:
            $readOnly: '%env(bool:READ_ONLY)%'

    App\Infrastructure\Authentication\Repository\AccessTokenAuditDoctrineRepository:
        autowire: true
        arguments:
            $readOnly: '%env(bool:READ_ONLY)%'

    App\Infrastructure\Backup\Repository\UserDoctrineRepository:
        autowire: true
        arguments:
            $readOnly: '%env(bool:READ_ONLY)%'

    App\Infrastructure\Backup\Repository\VersionDoctrineRepository:
        arguments:
            $registry: '@Doctrine\Persistence\ManagerRegistry'
            $fs: '@App\Domain\Backup\Service\Filesystem'
            $readOnly: '%env(bool:READ_ONLY)%'

    App\Domain\Storage\Factory\PublicUrlFactory:
        autowire: true
        arguments:
            $baseUrl: '%env(BASE_URL)%'

    App\Domain\Storage\Provider\UserUploadProvider:
        arguments:
            $logger: '@logger'
            $webserverTemporaryStoragePath: '%revproxy_storage_dir%'

    ro_fs:
        class: App\Infrastructure\Storage\Manager\FlysystemFilesystemManager
        arguments:
            $fs: '@readwrite_filesystem.storage'
            $stateManager: '@App\Domain\Common\Manager\StateManager'
            $isAppReadOnly: '%env(bool:READ_ONLY)%'

    rw_fs:
        class: App\Infrastructure\Storage\Manager\FlysystemFilesystemManager
        arguments:
            $fs: '@readonly_filesystem.storage'
            $stateManager: '@App\Domain\Common\Manager\StateManager'
            $isAppReadOnly: '%env(bool:READ_ONLY)%'

    # ========================================================================================
    # Notice: For S3Client and other cloud provider services please look at FlysystemPass.php
    # ========================================================================================

    App\Domain\Storage\Manager\FilesystemManager:
        alias: App\Domain\Storage\Manager\SeparatedReadWriteFilesystemManager

    App\Domain\Storage\Manager\SeparatedReadWriteFilesystemManager:
        arguments:
            $readFS: '@ro_fs'
            $writeFS: '@rw_fs'

    App\Domain\Authentication\Factory\IncomingUserFactory:
        autowire: true
        public: true

    App\Infrastructure\Common\Test\Database\RestoreDBInterface:
        alias: App\Infrastructure\Common\Test\Database\StateManager

    # SwaggerDocsProvider
    App\Infrastructure\Technical\Service\SwaggerDocsProvider:
        autowire: true
        arguments:
            $swaggerYamlPath: '%kernel.project_dir%/config/swagger.yaml.j2'
            $isDebug: '%kernel.debug%'

    #
    # Configurations (from environment variables)
    #
    App\Domain\Authentication\Configuration\PasswordHashingConfiguration:
        arguments:
            $algorithm: '%env(PASSWD_ALGORITHM)%'
            $iterations: '%env(int:PASSWD_ITERATIONS)%'

    App\Domain\Authentication\Configuration\ApplicationInfo:
        arguments:
            $environmentType: '%kernel.environment%'

    App\Domain\Authentication\Configuration\JWTConfiguration:
        arguments:
            $lifetime: '%env(JWT_LIFETIME)%'

