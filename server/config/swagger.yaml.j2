---
swagger: '2.0'
info:
    title: Backup Repository
    description: Specialized ninja for backup storage. Designed to have very low resource requirements.
    version: {{ version }}

# -------------------------------------
#  Includes: smaller, repeatable parts
# -------------------------------------
json_input_output: &json_input_output
    consumes:
        - application/json
    produces:
        - application/json

# -----------------------------------------------------------------------------------------------
#  Includes: Response bodies that repeats for various response codes or even different endpoints
# -----------------------------------------------------------------------------------------------
{% macro response_health_check() %}
schema:
    properties:
        status:
            items:
                properties:
                    storage:
                        type: boolean
                    database:
                        type: boolean
                type: object
            type: array
        messages:
            items:
                properties:
                    storage:
                        items:
                            type: string
                        type: array
                    database:
                        items:
                            type: string
                        type: array
                type: object
            type: array
        global_status:
            type: boolean
        ident:
            items:
                type: string
            type: array
    type: object
{% endmacro %}

{% macro response_500(message = 'Internal server error', type = 'app.fatal-error') %}
schema:
    properties:
        error:
            type: string
            example: "{{ message | raw }}"
        code:
            type: integer
            example: 500
        type:
            type: string
            example: "{{ type | raw }}"
{% endmacro %}

{% macro response_401() %}
schema:
    properties:
        code:
            type: integer
            example: 401
        message:
            type: string
            example: Expired JWT Token
{% endmacro %}

{% macro response_validation_error(field, message, code) %}
schema:
    properties:
        error:
            type: string
            example: "JSON payload validation error"
        fields:
            type: object
            properties:
                {{ field }}:
                    type: object
                    properties:
                        message:
                            type: string
                            example: "{{ message }}"
                        code:
                            type: integer
                            example: {{ code }}
{% endmacro %}

{% macro response_error(message, code, type) %}
schema:
    properties:
        error:
            type: string
            example: "{{ message }}"

        code:
            type: integer
            example: "{{ code }}"

        type:
            type: string
            example: "{{ type }}"
{% endmacro %}

{% macro standard_responses() %}
'500':
    description: Internal Server Error
    {{ _self.response_500() | indent_by('    ') | raw }}
'401':
    description: Unauthorized
    {{ _self.response_401() | indent_by('    ') | raw }}
{% endmacro %}

{% macro response_not_found() %}
schema:
    properties:
        code:
            type: integer
            example: 404
        message:
            type: string
            example: Route or resource not found
{% endmacro %}

{% macro validation_schema() %}
type: array
items:
    type: object
    attributes:
        code:
            type: integer
        message:
            type: string
{% endmacro %}

{% macro collection_validation_responses() %}
maxBackupsCount:
    {{ _self.validation_schema() | raw | indent_by('    ') }}
    example:
        - code: 40102
          message: Maximum count of X files reached

maxOneVersionSize:
    {{ _self.validation_schema() | raw | indent_by('    ') }}
    example:
        - code: 40103
          message: Maximum file size of Y reached

        - code: 42010
          message: Disk space format parsing error

        - code: 42016
          message: Number cannot be negative, got X

maxCollectionSize:
    {{ _self.validation_schema() | raw | indent_by('    ') }}
    example:
        - code: 40104
          message: Maximum collection size cannot exceed X

        - code: 40105
          message: Collection size cannot be smaller than single version size

        - code: 40106
          message: Collection maximum size is too small, requires at least X mb

        - code: 42010
          message: Disk space format parsing error

        - code: 42016
          message: Number cannot be negative, got X

filename:
    {{ _self.validation_schema() | raw | indent_by('    ') }}
    example:
        - code: 42011
          message: Filename cannot be empty

        - code: 42012
          message: Filename is not valid, please normalize it

strategy:
    {{ _self.validation_schema() | raw | indent_by('    ') }}
    example:
        - code: 42021
          message: "Invalid collection strategy picked 'X'. Choices: delete_oldest_when_adding_new, alert_when_backup_limit_reached"
{% endmacro %}

# -----------------
#  Request bodies
# -----------------

{% macro payload_collection() %}
schema:
  required:
      - maxBackupsCount
      - maxOneVersionSize
      - maxCollectionSize
      - strategy
      - filename
      - password
      - description
  properties:

      id:
          type: string
          example: f9eff6b7-3138-43ca-b4b1-b3f1d61df17b
      maxBackupsCount:
          type: integer
          example: 5
      maxOneVersionSize:
          type: string
          example: "100MB"
      maxCollectionSize:
          type: string
          example: "510MB"
      strategy:
          type: string
          example: delete_oldest_when_adding_new
          description: "Choices: delete_oldest_when_adding_new, alert_when_backup_limit_reached"
      password:
          type: string
          example: ""
      description:
          type: string
          example: "International Workers Association: Database backup of a website"
      filename:
          type: string
          example: "iwa-ait-www-sql.tar.gz"
{% endmacro %}

# ---------
#  Routes
# ---------
paths:
    "/api/stable/login_check":
        post:
            summary: User authentication - returns JSON Web Token
            description: "Returns obligatory bearer authentication token for usage in the rest of application endpoints. Important: 'Content-Type: application/json' header must be set!"
            <<: *json_input_output
            tags: ['Authentication']
            parameters:
                - name: body
                  in: body
                  description: JSON payload
                  schema:
                      type: object
                      required:
                          - email
                          - password
                      properties:
                          username:
                              example: it@iwa-ait.org
                              type: string
                          password:
                              example: workers-struggle-1936
                              type: string
            responses:
                {{ _self.standard_responses() | indent_by('                ') | raw }}
                '200':
                    description: Successful login
                    schema:
                        type: object
                        properties:
                            token:
                                type: string
                                example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2MDE3MTc3ODAsInJvbGVzIjpbInNlY3VyaXR5LmFkbWluaXN0cmF0b3IiLCJ1c2VyIiwidXBsb2FkLmFsbCIsInNlY3VyaXR5LmF1dGhlbnRpY2F0aW9uX2xvb2t1cCIsInNlY3VyaXR5LnNlYXJjaF9mb3JfdG9rZW5zIiwic2VjdXJpdHkub3ZlcndyaXRlIiwic2VjdXJpdHkuZ2VuZXJhdGVfdG9rZW5zIiwic2VjdXJpdHkudXNlX3RlY2huaWNhbF9lbmRwb2ludHMiLCJkZWxldGlvbi5hbGxfZmlsZXNfaW5jbHVkaW5nX3Byb3RlY3RlZF9hbmRfdW5wcm90ZWN0ZWQiLCJ2aWV3LmFueV9maWxlIiwidmlldy5maWxlc19mcm9tX2FsbF90YWdzIiwidmlldy5jYW5fdXNlX2xpc3RpbmdfZW5kcG9pbnRfYXRfYWxsIiwidmlldy5jYW5fc2VlX2FkbWluX21ldGFkYXRhX2luX2xpc3RpbmciLCJzZWN1cml0eS5yZXZva2VfdG9rZW5zIiwic2VjdXJpdHkuYWRtaW5pc3RyYXRvciIsImNvbGxlY3Rpb25zLmNyZWF0ZV9uZXciLCJjb2xsZWN0aW9ucy5jcmVhdGVfbmV3LndpdGhfY3VzdG9tX2lkIiwiY29sbGVjdGlvbnMuYWxsb3dfaW5maW5pdGVfbGltaXRzIiwiY29sbGVjdGlvbnMuZGVsZXRlX2FsbG93ZWRfY29sbGVjdGlvbnMiLCJjb2xsZWN0aW9ucy5jYW5fbGlzdF90b2tlbnNfaW5fYWxsb3dlZF9jb2xsZWN0aW9ucyIsImNvbGxlY3Rpb25zLm1vZGlmeV9hbnlfY29sbGVjdGlvbl9yZWdhcmRsZXNzX2lmX3Rva2VuX3dhc19hbGxvd2VkX2J5X2NvbGxlY3Rpb24iLCJjb2xsZWN0aW9ucy5tb2RpZnlfZGV0YWlsc19vZl9hbGxvd2VkX2NvbGxlY3Rpb25zIiwiY29sbGVjdGlvbnMudmlld19hbGxfY29sbGVjdGlvbnMiLCJjb2xsZWN0aW9ucy5jYW5fdXNlX2xpc3RpbmdfZW5kcG9pbnQiLCJjb2xsZWN0aW9ucy5tYW5hZ2VfdG9rZW5zX2luX2FsbG93ZWRfY29sbGVjdGlvbnMiLCJjb2xsZWN0aW9ucy51cGxvYWRfdG9fYWxsb3dlZF9jb2xsZWN0aW9ucyIsImNvbGxlY3Rpb25zLmxpc3RfdmVyc2lvbnNfZm9yX2FsbG93ZWRfY29sbGVjdGlvbnMiLCJjb2xsZWN0aW9ucy5kZWxldGVfdmVyc2lvbnNfZm9yX2FsbG93ZWRfY29sbGVjdGlvbnMiXSwidXNlcm5hbWUiOnt9LCJleHAiOjE2MDE3MjEzODB9.xtp6uMxty82MuyyBSDjWBuJSOpugmn3tyzM7YwxV_mzgk0icgywUzQsULqMZuGABgmYZkOb3ZQG8YaCVYWau1ITk-fpT1nyb7acgI_05mPEsZ1bfgo9DZgOSlYoYiTBfcR28MdYDF0q7HD6O7Ja6pnY9Pk9fsWXoVOsdRz2mIWSY0CNtIqMJ2Cmyzz6Ggj4OPYmyNsVao6IMj-k2XE5D_R_HwJoUDl34iwSNeOdzser-d6MwV6NQ5ceSX7JZrbWVwsNcIJG-B34vBRbNFKBHp40S-3wcPwoIv5DtaJgZgytz8T1hGGDSS3RCc2TYehP_a96t7CpoYGvvRERvYEqZe1zepRR0zGRqZWw2WM_kN3_XE86SggoTZx_rx3-wL8zZP4SPIguEVghMepmrvfVek7psPYcKajbhJOpGzVAe0-U12BKVvjb389pGz0KM2HLyY6N9XX5bN_3X6eyRcaNycsX4WLbHfekjhXPn1RmGJ32_giUarMf28w9GSULMbodIMf8buF14b8HyVHCfZ0kJLVUBJYYRQAj0OQnQK6mubZucnX9t-qxvZLWalD-SpJilpG2L2F4VDkxJO_x8sJdofmdTHH2xZ0cBMfcTUFUasvZEqYRcZrzDKA0WGiisXSNpQX3HGjmdimemzDS5JYOFCobrVYZ_y9LWGCM0yyKBZ5E"
                '401 - Login error':
                    description: Invalid credentials
                    schema:
                        type: object
                        properties:
                            code:
                                type: integer
                                example: 401
                            message:
                                type: string
                                example: "Invalid credentials."

    "/api/stable/auth/user":
        post:
            summary: Create a new user, assign roles, set optional expiration, upload policy
            description: Request to create a new access token
            <<: *json_input_output
            tags: ['Authentication']
            parameters:
                - name: body
                  in: body
                  description: JSON payload
                  schema:
                      required:
                          - id
                          - roles
                          - data
                      properties:
                          id:
                              example: ca6a2635-d2cb-4682-ba81-3879dd0e8a77
                              type: string
                          password:
                              example: aNti_cap.italiSM
                              type: string
                          email:
                              example: example@riseup.net
                              type: string
                          about:
                              example: A member of the collective. Technically website administrator.
                              type: string
                          organization:
                              example: Food not bombs
                              type: string
                          roles:
                              example:
                                  - collections.create_new
                                  - collections.manage_users_in_allowed_collections
                              items:
                                  type: string
                              type: array
                          expires:
                              example: '2021-05-01 01:06:01'
                              type: string
                          data:
                              "$ref": "#/definitions/UserRestrictions"
                      type: object
            responses:
                {{ _self.standard_responses() | indent_by('                ') | raw }}
                '201':
                    description: User was successfuly created
                    schema:
                        properties:
                            status:
                                example: true
                                type: boolean
                            message:
                                example: User created
                                type: string
                            user:
                                "$ref": "#/definitions/User"
                        type: object

                '400 - Invalid e-mail format':
                    description: Invalid e-mail format
                    {{ _self.response_validation_error('email', 'Invalid e-mail format', 40005) | indent_by('                    ') | raw }}

                '400 - User ID format invalid, should be a uuidv4 format':
                    description: Invalid e-mail format
                    {{ _self.response_validation_error('email', 'User ID format invalid, should be a uuidv4 format', 40021) | indent_by('                    ') | raw }}

                '400 - Invalid role selected':
                    description: Invalid role selected
                    {{ _self.response_validation_error('roles', 'Invalid role selected', 40010) | indent_by('                    ') | raw }}

                '400 - Expiration date has invalid date format':
                    description: Expiration date has invalid date format
                    {{ _self.response_validation_error('expirationDate', 'Expiration date has invalid date format', 41014) | indent_by('                    ') | raw }}

                '400 - Password is too short':
                    description: Password is too short
                    {{ _self.response_validation_error('password', 'Password is too short', 40006) | indent_by('                    ') | raw }}

                '400 - Password is too long':
                    description: Password is too long
                    {{ _self.response_validation_error('password', 'Password is too long', 40007) | indent_by('                    ') | raw }}

                '400 - Password should contain at least one special character':
                    description: Password should contain at least one special character
                    {{ _self.response_validation_error('password', 'Password should contain at least one special character', 40008) | indent_by('                    ') | raw }}

                '400 - Password cannot begin or end with a blank character':
                    description: Password cannot begin or end with a blank character
                    {{ _self.response_validation_error('password', 'Password cannot begin or end with a blank character', 40009) | indent_by('                    ') | raw }}

                '400 - Organization - Max chars':
                    description: Maximum allowed characters exceeded
                    {{ _self.response_validation_error('organization', 'Maximum allowed characters exceeded', 40003) | indent_by('                    ') | raw }}

                '400 - About - Max chars':
                    description: Maximum allowed characters exceeded
                    {{ _self.response_validation_error('about', 'Maximum allowed characters exceeded', 40003) | indent_by('                    ') | raw }}

    "/api/stable/auth/user/search":
        get:
            summary: Search for users accounts
            tags: ['Authentication']
            parameters:
                - name: q
                  in: query
                  description: 'Query string, a search phrase. Notice: If "security.cannot_see_full_token_ids"  restriction is applied on current viewer token, then search phrase will only consider non-asterisk characters for safety'
                  type: string
                - name: limit
                  in: query
                  description: Number of entries returned by the request
                  type: integer
                - name: page
                  in: query
                  description: Currenty fetched page
                  type: integer
            responses:
                {{ _self.standard_responses() | indent_by('                ') | raw }}
                '200':
                    description: Search users by id and associated fields
                    schema:
                        properties:
                            status:
                                example: true
                                type: boolean
                            message:
                                example: Matches found
                                type: string
                            context:
                                properties:
                                    pagination:
                                        "$ref": "#/definitions/Pagination"
                                type: object
                            data:
                                items:
                                    "$ref": "#/definitions/User"
                                type: array
                        type: object

                '400 - Limit is too high':
                    description: Limit is too high
                    {{ _self.response_validation_error('query', 'Limit is too high', 50003) | indent_by('                    ') | raw }}

                '400 - Limit is too low':
                    description: Limit is too low
                    {{ _self.response_validation_error('query', 'Limit is too low', 50004) | indent_by('                    ') | raw }}

                '400 - Page cannot be negative':
                    description: Page cannot be negative
                    {{ _self.response_validation_error('page', 'Page cannot be negative', 50005) | indent_by('                    ') | raw }}


    "/api/stable/auth/user/by-id/{userId}":
        get:
            summary: Retrieve details of a specific user
            tags: ['Authentication']
            parameters:
                - name: userId
                  in: path
                  required: true
                  description: Id of an user to lookup
                  type: string
            responses:
                {{ _self.standard_responses() | indent_by('                ') | raw }}
                '200':
                    description: Shows details about given user
                    schema:
                        properties:
                            status:
                                example: true
                                type: boolean
                            message:
                                example: User found
                                type: string
                            user:
                                "$ref": "#/definitions/User"
                            context:
                                items:
                                    type: string
                                type: array
                        type: object
                '400':
                    description: Not found
                    {{ _self.response_not_found() | indent_by('                ') | raw }}

        delete:
            summary: Revoke an access for given user
            tags: ['Authentication']
            parameters:
                - name: userId
                  in: path
                  required: true
                  description: Id of an user that should be deleted
                  type: string
            responses:
                {{ _self.standard_responses() | indent_by('                ') | raw }}
                '404':
                    description: Not found
                    {{ _self.response_not_found() | indent_by('                ') | raw }}
                '403 - No permissions to delete this object':
                    description: No permissions to delete this object
                    {{ _self.response_error('No permissions to delete this object', 40303, 'request.auth-error') | indent_by('                    ') | raw }}
                '201':
                    description: User account was deleted
                    schema:
                        properties:
                            status:
                                example: true
                                type: boolean
                            message:
                                example: User was deleted
                                type: string
                            user:
                                "$ref": "#/definitions/User"
                        type: object


    "/api/stable/auth/roles":
        get:
            summary: List available roles
            tags: ['Authentication']
            responses:
                {{ _self.standard_responses() | indent_by('                ') | raw }}
                "403 - You don't have enough permissions to use technical endpoints":
                    description: "You don't have enough permissions to use technical endpoints"
                    {{ _self.response_error('You don\'t have enough permissions to use technical endpoints', 40312, 'request.auth-error') | indent_by('                    ') | raw }}
                '200':
                    description: Lists avaialble roles
                    schema:
                        properties:
                            status:
                                example: 'true'
                                type: boolean
                            message:
                                example: Matches found
                                type: string
                            data:
                                items:
                                    properties:
                                        role_name:
                                            example: Some description
                                            type: string
                                    type: object
                                type: array
                            context:
                                type: object
                                properties:
                                    pagination:
                                        "$ref": "#/definitions/Pagination"
                        type: object


    "/api/stable/repository/collection":
        get:
            summary: Search for collections
            tags: ['Backup collection management']
            parameters:
                - name: searchQuery
                  in: query
                  description: Search phrase
                  type: string
                - name: tags
                  in: query
                  description: List of tags to search by
                  items:
                      type: string
                  type: array
                - name: allowedTokens
                  in: query
                  description: Filter by allowed tokens
                  items:
                      type: string
                  type: array
                - name: createdFrom
                  in: query
                  description: Creation date
                  type: string
                - name: createdTo
                  in: query
                  description: Created before this date
                  type: string
                - name: limit
                  in: query
                  description: Limit returned results
                  type: integer
                - name: page
                  in: query
                  description: Current page
                  type: integer
            responses:
                # @todo: Pagination validation
                {{ _self.standard_responses() | indent_by('                ') | raw }}
                "403 - Cannot access listing endpoint, no enough permissions assigned":
                    description: "Cannot access listing endpoint, no enough permissions assigned"
                    {{ _self.response_error('Cannot access listing endpoint, no enough permissions assigned', 40304, 'request.auth-error') | indent_by('                    ') | raw }}
                '200':
                    description: Lists collections
                    schema:
                        properties:
                            status:
                                example: true
                                type: boolean
                            elements:
                                items:
                                    "$ref": "#/definitions/BackupCollection"
                                type: array
                            pagination:
                                "$ref": "#/definitions/Pagination"
                        type: object

        post:
            summary: Create (POST), edit (PUT) a versioned file-collection that will keep historic versions of file, and rotate them.
            tags: ['Backup collection management']
            <<: *json_input_output
            parameters:
                - name: simulate
                  in: query
                  description: Set to true to only simulate request, without commiting the changes. Optional parameter.
                  type: boolean
                - name: body
                  in: body
                  description: JSON payload
                  {{ _self.payload_collection() | indent_by('                  ') | raw }}
            responses:
                {{ _self.standard_responses() | indent_by('                ') | raw }}
                "403 - Current permissions does not allow to create this object":
                    description: "Current permissions does not allow to create this object"
                    {{ _self.response_error('Current permissions does not allow to create this object', 40306, 'request.auth-error') | indent_by('                    ') | raw }}
                "403 - No permissions to assign predictable id":
                    description: "No permissions to assign predictable id"
                    {{ _self.response_error('No permissions to assign predictable id', 40305, 'request.auth-error') | indent_by('                    ') | raw }}

                "400":
                    schema:
                        properties:
                            error:
                                type: string
                                example: JSON payload validation error
                            fields:
                                type: object
                                properties:
                                    id:
                                        {{ _self.validation_schema() | indent_by('                                        ') | raw }}
                                        example:
                                            - code: 40100
                                              message: Collection ID is reserved already by other Collection

                                            - code: 40101
                                              message: Collection ID is not a valid uuidv4 formatted string

                                    {{ _self.collection_validation_responses() | indent_by('                                    ') | raw }}


                '201':
                    description: Collection was successfuly created
                    schema:
                        properties:
                            status:
                                example: true
                                type: boolean
                            message:
                                example: OK
                                type: string
                            collection:
                                "$ref": "#/definitions/BackupCollection"
                        type: object
        put:
            summary: Create (POST), edit (PUT) a versioned file-collection that will keep historic versions of file, and rotate them
            tags: ['Backup collection management']
            <<: *json_input_output
            parameters:
                - name: simulate
                  in: query
                  description: Set to true to only simulate request, without commiting the changes. Optional parameter.
                  type: boolean
                - name: body
                  in: body
                  description: JSON payload
                  {{ _self.payload_collection() | indent_by('                  ') | raw }}
            responses:
                {{ _self.standard_responses() | indent_by('                ') | raw }}
                "403 - No permissions to modify this object":
                    description: "No permissions to modify this object"
                    {{ _self.response_error('user', 'No permissions to modify this object', 'request.auth-error') | indent_by('                    ') | raw }}
                '404':
                    description: Not found
                    {{ _self.response_not_found() | indent_by('                ') | raw }}
                "400 - Validation error":
                    schema:
                        properties:
                            error:
                                type: string
                                example: JSON payload validation error
                            fields:
                                type: object
                                properties:
                                    {{ _self.collection_validation_responses(true) | indent_by('                                    ') | raw }}

                '200':
                    description: Collection was modified
                    schema:
                        properties:
                            status:
                                example: true
                                type: boolean
                            message:
                                example: OK
                                type: string
                            collection:
                                "$ref": "#/definitions/BackupCollection"
                            context:
                                items:
                                    type: string
                                type: array
                        type: object


    "/api/stable/repository/collection/{id}":
        get:
            summary: Fetch information about collection
            tags: ['Backup collection management']
            parameters:
                - name: id
                  in: path
                  required: true
                  description: Collection id
                  type: string
            responses:
                {{ _self.standard_responses() | indent_by('                ') | raw }}
                "403 - Got access denied while trying to access the object":
                    description: "Got access denied while trying to access the object"
                    {{ _self.response_error('Got access denied while trying to access the object', 40302, 'request.auth-error') | indent_by('                    ') | raw }}
                '404':
                    description: Not found
                    {{ _self.response_not_found() | indent_by('                ') | raw }}
                '200':
                    description: Collection was found
                    schema:
                        properties:
                            status:
                                example: true
                                type: boolean
                            message:
                                example: OK
                                type: string
                            collection:
                                "$ref": "#/definitions/BackupCollection"
                            context:
                                items:
                                    type: string
                                type: array
                        type: object

        delete:
            summary: Delete a collection
            tags: ['Backup collection management']
            parameters:
                - name: id
                  in: path
                  required: true
                  description: Collection id
                  type: string
            responses:
                {{ _self.standard_responses() | indent_by('                ') | raw }}
                "403":
                    description: "No permissions to delete this object"
                    {{ _self.response_error('No permissions to delete this object', 40303, 'request.auth-error') | indent_by('                    ') | raw }}
                '404':
                    description: Not found
                    {{ _self.response_not_found() | indent_by('                ') | raw }}

                # Collection should be empty before it will be deleted

                '200':
                    description: Collection was deleted
                    schema:
                        properties:
                            status:
                                example: true
                                type: boolean
                            message:
                                example: OK, collection deleted
                                type: string
                            collection:
                                "$ref": "#/definitions/BackupCollection"
                            context:
                                items:
                                    type: string
                                type: array
                        type: object

# ===============================
#  Collection access management
# ===============================

    "/api/stable/repository/collection/{id}/access":
        get:
            summary: Lists all allowed tokens in given collection
            tags: ['Backup collection access control']
            parameters:
                - name: id
                  in: path
                  required: true
                  description: Collection id, eg. 946348f2-8f3c-4cf0-8827-650fb044ed39
                  type: string
            responses:
                {{ _self.standard_responses() | indent_by('                ') | raw }}
                "403 - Current token does not allow to list tokens of this collection":
                    description: "Current token does not allow to list tokens of this collection"
                    {{ _self.response_error('Current token does not allow to list tokens of this collection', 40307, 'request.auth-error') | indent_by('                    ') | raw }}
                '404':
                    description: Not found
                    {{ _self.response_not_found() | indent_by('                ') | raw }}
                '200':
                    description: 'Lists all users that are granted access to given collection. Notice: Returns censored token ids, when requester has enabled restriction role ''security.cannot_see_full_token_ids'''
                    schema:
                        properties:
                            status:
                                example: true
                                type: boolean
                            users:
                                items:
                                    "$ref": "#/definitions/UserInACollection"
                                type: array
                        type: object

        post:
            summary: Allow user to be able to operate on a collection
            tags: ['Backup collection access control']
            description: Request to grant access to collection for given user
            <<: *json_input_output
            parameters:
                - name: simulate
                  in: query
                  description: If set to true, then no changes are comimited
                  type: boolean
                - name: id
                  in: path
                  required: true
                  description: Collection id for which to manage token access
                  type: string
                - name: body
                  in: body
                  description: JSON payload
                  schema:
                      required:
                          - user
                      properties:
                          user:
                              example: ca6a2635-d2cb-4682-ba81-3879dd0e8a77
                              type: string
                      type: object
            responses:
                {{ _self.standard_responses() | indent_by('                ') | raw }}
                "403 - No permissions to grant and/or revoke access for other users in this collection":
                    description: "No permissions to grant and/or revoke access for other users in this collection"
                    {{ _self.response_error('No permissions to grant and/or revoke access for other users in this collection', 40308, 'request.auth-error') | indent_by('                    ') | raw }}
                "403 - Cannot give roles to other user that current context user does not have":
                    description: "Cannot give roles to other user that current context user does not have"
                    {{ _self.response_error('user', 'Cannot give roles to other user that current context user does not have', 40315, 'request.auth-error') | indent_by('                    ') | raw }}
                '404':
                    description: Not found
                    {{ _self.response_not_found() | indent_by('                ') | raw }}
                '200':
                    description: Access to collection was granted or revoked
                    schema:
                        properties:
                            status:
                                example: true
                                type: boolean
                            data:
                                properties:
                                    collection:
                                        "$ref": "#/definitions/BackupCollection"
                                    user:
                                        "$ref": "#/definitions/UserInACollection"
                                    users_count:
                                        example: 5
                                        type: integer
                                type: object
                        type: object


    "/api/stable/repository/collection/{id}/access/{uid}":
        delete:
            summary: Revoke a user access to a given collection
            tags: ['Backup collection access control']
            description: Revoke a user access to a given collection
            parameters:
                - name: simulate
                  in: query
                  description: If set to true, then no changes are comimited
                  type: boolean
                - name: id
                  in: path
                  required: true
                  description: Collection id for which to manage token access
                  type: string
                - name: user
                  in: path
                  description: User id to revoke access for (subject token)
                  type: string
                - name: uid
                  in: path
                  required: true
                  type: string
            responses:
                {{ _self.standard_responses() | indent_by('                ') | raw }}
                "403 - No permissions to grant and/or revoke access for other users in this collection":
                    description: "No permissions to grant and/or revoke access for other users in this collection"
                    {{ _self.response_error('No permissions to grant and/or revoke access for other users in this collection', 40308, 'request.auth-error') | indent_by('                    ') | raw }}
                '404':
                    description: When user or collection does not exist
                    {{ _self.response_not_found() | indent_by('                ') | raw }}
                '200':
                    description: Access to collection was revoked
                    schema:
                        properties:
                            status:
                                example: true
                                type: boolean
                            data:
                                properties:
                                    collection:
                                        "$ref": "#/definitions/BackupCollection"
                                    uid:
                                        "$ref": "#/definitions/UserInACollection"
                                    users_count:
                                        example: 4
                                        type: integer
                                type: object
                        type: object


    "/api/stable/repository/collection/{collectionId}/{naming}/{backupId}":
        get:
            summary: Download selected version of file in the collection
            tags: ['Backup']
            parameters:
                - name: collectionId
                  in: path
                  required: true
                  description: Id of a collection
                  type: string
                - name: backupId
                  in: path
                  required: true
                  description: Id of a backup, or a version name eg. v1, v2, latest
                  type: string
                - name: password
                  in: query
                  description: If the file is password protected, then a password needs to be entered there
                  type: string
                - name: naming
                  in: path
                  required: true
                  type: string
            responses:
                {{ _self.standard_responses() | indent_by('                ') | raw }}
                "403 - Current access does not allow you to download any backup from this collection":
                    description: "Current access does not allow you to download any backup from this collection"
                    {{ _self.response_error('Current access does not allow you to download any backup from this collection', 40310, 'request.auth-error') | indent_by('                    ') | raw }}
                '404':
                    description: When a collection or version does not exist
                    {{ _self.response_not_found() | indent_by('                ') | raw }}
                '200':
                    description: Returns JSON with url to the file download
                    schema:
                        properties:
                            status:
                                example: true
                                type: boolean
                            url:
                                example: https://api.storage.iwa-ait.org/repository/file/class-struggle.pdf
                                type: string
                        type: object
        delete:
            summary: Delete a version
            tags: ['Backup']
            parameters:
                - name: collectionId
                  in: path
                  required: true
                  type: string
                - name: naming
                  in: path
                  required: true
                  type: string
                - name: backupId
                  in: path
                  required: true
                  type: string
            responses:
                {{ _self.standard_responses() | indent_by('                ') | raw }}
                "403 - Current access does not allow you to delete existing backups":
                    description: "Current access does not allow you to delete existing backups"
                    {{ _self.response_error('Current access does not allow you to delete existing backups', 40309, 'request.auth-error') | indent_by('                    ') | raw }}
                '404':
                    description: When a collection or version does not exist
                    {{ _self.response_not_found() | indent_by('                ') | raw }}
                '200':
                    description: Returns JSON with url to the file download
                    schema:
                        properties:
                            status:
                                example: true
                                type: boolean
                            message:
                                example: "OK, version deleted"
                                type: string
                        type: object

    "/api/stable/repository/collection/{collectionId}/{naming}":
        post:
            summary: Send a new version to the collection
            tags: ['Backup']
            <<: *json_input_output
            parameters:
                - name: collectionId
                  in: path
                  required: true
                  type: string
                - name: naming
                  in: path
                  required: true
                  type: string
            responses:
                {{ _self.standard_responses() | indent_by('                ') | raw }}
                '404':
                    description: When a collection or version does not exist
                    {{ _self.response_not_found() | indent_by('                ') | raw }}
                "403 - Current access does not grant you a possibility to upload to this backup collection":
                    description: "Current access does not grant you a possibility to upload to this backup collection"
                    {{ _self.response_error('Current access does not grant you a possibility to upload to this backup collection', 40308, 'request.auth-error') | indent_by('                    ') | raw }}
                '200':
                    description: File was uploaded
                    schema:
                        properties:
                            status:
                                example: true
                                type: boolean
                            collection:
                                "$ref": "#/definitions/BackupCollection"
                            version:
                                "$ref": "#/definitions/BackupVersion"
        get:
            summary: List versions in a collection
            tags: ['Backup']
            parameters:
                - name: collectionId
                  in: path
                  required: true
                  type: string
                - name: naming
                  in: path
                  required: true
                  type: string
            responses:
                {{ _self.standard_responses() | indent_by('                ') | raw }}
                "403 - Current roles does not grant you a possibility to list files in this backup collection":
                    description: "Current roles does not grant you a possibility to list files in this backup collection"
                    {{ _self.response_error('Current roles does not grant you a possibility to list files in this backup collection', 40311, 'request.auth-error') | indent_by('                    ') | raw }}
                "200":
                    description: Shows a list of BackupVersion objects
                    schema:
                        properties:
                            status:
                                example: true
                                type: boolean
                            message:
                                example: "OK"
                                type: string
                            versions:
                                type: object
                                properties:
                                    "1":
                                        type: object
                                        properties:
                                            details:
                                                properties:
                                                    "$ref": "#/definitions/BackupVersion"
                                            url:
                                                type: string
                                                example: "http://localhost:8000/api/stable/repository/file/db-backup.tar.gz"


    # ========================================
    #  Endpoints: Administration & Technical
    # ========================================

    "/api/stable/repository":
        get:
            summary: Search for files in the storage
            tags: ['Administration']
            parameters:
                - name: page
                  in: query
                  type: integer
                  default: 1
                - name: password
                  in: query
                  type: string
                  default: ''
                - name: searchQuery
                  in: query
                  type: string
                - name: tags
                  in: query
                  items:
                      type: string
                  type: array
            responses:
                {{ _self.standard_responses() | indent_by('                ') | raw }}
                "403 - Cannot access listing endpoint, no enough permissions assigned":
                    description: "Cannot access listing endpoint, no enough permissions assigned"
                    {{ _self.response_error('Cannot access listing endpoint, no enough permissions assigned', 40304, 'request.auth-error') | indent_by('                    ') | raw }}
                '200':
                    description: Returns a list of files in the storage, matching given search criteria
                    schema:
                        properties:
                            results:
                                items:
                                    "$ref": "#/definitions/StoredFile"
                                type: array
                            pagination:
                                "$ref": "#/definitions/Pagination"
                        type: object


    "/api/stable/repository/file/{filename}":
        get:
            summary: Download a file
            tags: ['Administration']
            parameters:
                - name: filename
                  in: path
                  required: true
                  description: Filename
                  type: string
                - name: password
                  in: query
                  required: false
                  description: Optionally a password if file is password protected
                  type: string
                - name: Range
                  in: header
                  description: HTTP Byte-Range support
                  type: string
                - name: If-None-Match
                  in: header
                  description: HTTP caching header
                  type: string
                - name: If-modified-since
                  in: header
                  description: HTTP caching header
                  type: string
            responses:
                {{ _self.standard_responses() | indent_by('                ') | raw }}
                "403 - Got access denied while trying to access the object":
                    description: "Cannot browse files on the storage"
                    {{ _self.response_error('Got access denied while trying to access the object', 40302, 'request.auth-error') | indent_by('                    ') | raw }}
                '200':
                    description: Returns file contents

    "/api/stable/version":
        get:
            summary: Front page
            tags: ['Technical']
            responses:
                {{ _self.standard_responses() | indent_by('                ') | raw }}
                '200':
                    description: String response code with version, in JSON format
                    schema:
                        properties:
                            version:
                                description: 'Full application version, including release type (if any). Examples: 4.0.0 for stable release, 4.0.0-dev for development version, 3.0.0-RC1 for release candidate, 3.0.0-alpha for alpha release.'
                                example: 4.0.0
                                type: string
                            dbType:
                                description: Doctrine ORM database platform name
                                example: postgresql
                                type: string
                        type: object
                '400':
                    description: When not authorized with any token

    "/api/stable/doc.json":
        get:
            summary: Documentation endpoint (plain SWAGGER json format)
            tags: ['Technical']
            responses:
                default:
                    description: ''

    "/api/stable/doc":
        get:
            summary: Documentation endpoint
            tags: ['Technical']
            responses:
                default:
                    description: ''

    "/db/backup":
        get:
            summary: Backup a database (Visible only in automatic tests and developer mode)
            tags: ['Technical']
            responses:
                default:
                    description: ''

    "/db/restore":
        get:
            summary: Restore a database (Visible only in automatic tests and developer mode)
            tags: ['Technical']
            responses:
                default:
                    description: ''

    "/test/errors/500":
        get:
            summary: Example 500 error page (Visible only in automatic tests and developer mode)
            tags: ['Technical']
            responses:
                {{ _self.standard_responses() | indent_by('                ') | raw }}

    "/":
        get:
            summary: Serving frontend application
            responses:
                default:
                    description: ''

    "/health":
        get:
            summary: Show application status
            tags: ['Technical']
            parameters:
                - name: code
                  in: query
                  description: Secret code given to monitoring tool, so nobody else can access this specific endpoint
                  type: string
            responses:
                '200':
                    description: The service is healthy, including all of its components
                    {{  _self.response_health_check() | indent_by('                    ') }}
                '403':
                    description: When the 'code' parameter does not match the 'HEALTH_CHECK_CODE' setting
                '503':
                    description: Same response format as for 200 code. 503 is when at least one check from list failed
                    {{  _self.response_health_check() | indent_by('                    ') }}

# --------------------------
#  API objects definitions
# --------------------------
definitions:
    User:
        properties:
            id:
                example: d5aab8d7-64f3-42ce-bae4-59d7108294c3
                type: string
            email:
                example: someone@iwa-ait.org
                type: string
            expired:
                type: boolean
                example: false
            expires:
                type: string
                example: "2077-05-01 08:00:00"
            active:
                type: boolean
                example: true
            roles:
                example:
                    - upload.images
                items:
                    type: string
                type: array
            data:
                "$ref": "#/definitions/UserRestrictions"
        type: object

    UserRestrictions:
        properties:
            tags:
                example:
                    - international-workers-association
                    - iwa-ait.org
                items:
                    type: string
                type: array
            maxAllowedFileSize:
                example: 1073741824
                type: integer
            allowedIpAddresses:
                example:
                    - 192.168.1.161
                items:
                    type: string
                type: array
            allowedUserAgents:
                example:
                    - Mozilla XYZ
                    - curl/15.55 (RiotKit)
                items:
                    type: string
                type: array
        type: object

    Pagination:
        properties:
            current:
                type: integer
            max:
                type: integer
            perPage:
                type: integer
        type: object

    BackupCollection:
        properties:
            id:
                example: d5aab8d7-64f3-42ce-bae4-59d7108294c3
                type: string
            maxBackupsCount:
                example: '3'
                type: int
            maxOneBackupVersionSize:
                example: '3221225472'
                type: int
            maxCollectionSize:
                example: '9663676416'
                type: int
            createdAt:
                example: '2022-05-01 08:00:00'
                type: int
            strategy:
                example: delete_oldest_when_adding_new
                type: string
            description:
                example: Database backup for International Workers Association
                type: string
            filename:
                example: iwa-ait-db.tar.gz
                type: string
        type: object

    UserInACollection:
        properties:
            id:
                example: ca6a2635-d2cb-4682-ba81-3879dd0e8a77
                type: string
            roles:
                items:
                    type: string
                type: array
            idIsCensored:
                type: boolean
        type: object

    BackupVersion:
        type: object
        properties:
            id:
                type: string
                example: c38a99ca-f4c5-4548-ad9b-4bb70fed710a
            version:
                type: integer
                example: 1
            creationDate:
                "$ref": "#/definitions/DateTime"
            file:
                "$ref": "#/definitions/BackupFile"

    BackupFile:
        type: object
        properties:
            id:
                type: integer
                example: 3
            filename:
                type: string
                example: 2ab3dbc24dsolidarity-with-postal-workers-article-v2

    DateTime:
        type: object
        properties:
            date:
                type: string
                example: "2020-11-05 07:40:39.244885"
            timezone_type:
                type: integer
                example: 3
            timezone:
                type: string
                example: UTC

    StoredFile:
        properties:
            publicUrl:
                example: https://storage.iwa-ait.org/repository/file/iwa_brochure_updated_2018_0.pdf
                type: string
            filename:
                example: iwa_brochure_updated_2018_0.pdf
                type: string
            contentHash:
                example: 4701cc79c126b52986130430a3c0225a9de730feabcb76f55f493532f0f05aa4
                type: string
            dateAdded:
                example: '2020-05-01 08:00:00'
                type: string
            timezone:
                example: Europe/Warsaw
                type: string
            mimeType:
                example: application/pdf
                items:
                    type: string
                type: string
            tags:
                example:
                    - public
                    - documents
                items:
                    type: string
                type: array
            public:
                type: boolean
            attributes:
                example:
                    isPasswordProtected: true
                items:
                    type: string
                type: array
        type: object

securityDefinitions:
    bearerAuth:
        type: apiKey
        in: header
        name: Authorization
        template: "Bearer {apiKey}"
        description: "JSON Web Token. Type: Bearer {apiKey} (DO NOT FORGET ABOUT 'Bearer' at the beginning!)"

    test_token:
        name: "test-token"
        type: apiKey
        in: header
        description: 'Value: {token}. example: "test-token-full-permissions" when application is set to APP_ENV=dev or APP_ENV=test'

security:
    - test_token: []
    - bearerAuth: []

# @todo: dynamic host detection, maybe in javascript?
host: localhost:8000
