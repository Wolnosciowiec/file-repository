version: "2.2"
services:
    #
    # Our container that is running all the time, can run scheduled backups and manually triggered backups
    #
    # Recommendation: Should be running on separate machine than server (app_storage)
    #
    client:
        image: quay.io/riotkit/bahub:latest-build # recommended: Do not use latest on production, use a fixed version
        volumes:
            - "./cron:/cron:ro"
            - "./config.yaml:/bahub.conf.yaml:ro"
            - "/var/run/docker.sock:/var/run/docker.sock"
        depends_on:
            - filerepository.local
        environment:
            BACKUPS_ENCRYPTION_PASSPHRASE: pssst-secret-encryption-key-here
            BACKUPS_TOKEN: f3f9be7e-5a55-4a40-93cd-19e611f67406
            BACKUPS_REDIS_COLLECTION_ID: 46e08bcc-7a35-4fa4-b866-72a3d714fd43
            COMPOSE_PROJECT_NAME: test_client

            # local container
            SERVER_URL: http://filerepository.local

    #
    # The File Repository server. Simplest, non-optimal installation on SQLite3 database
    #
    # Recommendation: The server should be running on a different machine than client (bahub)
    #
    filerepository.local:
        image: quay.io/riotkit/file-repository:latest-build  # recommended: Do not use latest on production, use a fixed version
        environment:
            SECURITY_ADMIN_TOKEN: f3f9be7e-5a55-4a40-93cd-19e611f67406
            POST_INSTALL_CMD:
                # on startup we create a backup collection
                ./bin/console backup:create-collection --ignore-error-if-exists --max-backups-count=5
                    --max-one-version-size=10mib --max-collection-size=2gib --strategy=delete_oldest_when_adding_new
                    --filename=redis-data-files.tar.gz --id=46e08bcc-7a35-4fa4-b866-72a3d714fd43;


    #
    # Example: Test container for backup & restore
    #
    redis:
        image: redis:3-alpine
        volumes:
            - ./redis:/data
        command: "redis-server --appendonly yes"
