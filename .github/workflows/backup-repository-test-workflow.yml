name: "Backup Repository Server testing workflow"
on:
    push:
    pull_request:
        branches:
            - master
            - primary

jobs:
    "test_each_new_commit":
        runs-on: ubuntu-20.04
        steps:
            - name: "Checkout"
              uses: actions/checkout@v1

            # —— Dependencies and environment ————————————————————————————————————
            - name: "Install CI OS dependencies"
              run: "sudo apt-get install libssl-dev libcurl4-openssl-dev python-dev"

            - name: "Install project dependencies"
              run: "sudo pip install -r ./requirements-dev.txt -r ./bahub/requirements.txt"

            - name: Setup PHP, extensions and composer
              uses: shivammathur/setup-php@v2
              with:
                  php-version: "7.4"
                  extensions: mbstring, ctype, iconv, intl, fileinfo, openssl, filter, iconv, json, mbstring, pdo, pdo_pgsql
                  tools: symfony, composer
              env:
                  update: true

            - name: "Install server libraries"
              run: "rkd :env:example :install --dev"
              working-directory: "server"

            - name: "Run containers required for tests"
              run: "rkd :bahub:env:adapters"

            # —— Tests —————————————————————————————————————————————————————————
            - name: "Server: Unit tests"
              run: "rkd :test:unit || true"
              if: ${{ always() }}  # @todo: Remove
              working-directory: "server"

            - name: "Bahub client: Unit tests"
              run: "rkd :test:unit"
              if: ${{ always() }}  # @todo: Remove
              working-directory: "bahub"

            # —— Reports ———————————————————————————————————————————————————————
            - name: "Make HTML report from server unit tests"
              run: "rkd :test:unit:html"
              if: ${{ always() }}
              working-directory: "server"

            - name: "Archive results"
              uses: actions/upload-artifact@v2
              if: ${{ always() }}
              with:
                  name: tests-results
                  path: server/var/tests

            - name: "Archive logs"
              uses: actions/upload-artifact@v2
              if: ${{ always() }}
              with:
                  name: logs
                  path: server/var/log

            # —— Distribution ———————————————————————————————————————————————————————
            - name: "Build distribution"
              run: "rkd :build:dist-zip :build:swagger-docs :build:docs"
              working-directory: "server"

            - name: "Archive distribution package"
              uses: actions/upload-artifact@v2
              if: ${{ always() }}
              with:
                  name: complete-distributable-package.tar.gz
                  path: server/var/dist.tar.gz

            - name: "Archive API documentation"
              uses: actions/upload-artifact@v2
              if: ${{ always() }}
              with:
                  name: api-documentation.swagger.json
                  path: server/swagger.json

            - name: "Archive manual documentation"
              uses: actions/upload-artifact@v2
              if: ${{ always() }}
              with:
                  name: manual-documentation.zip
                  path: docs/build/html

    "release_dev_dockers":
        needs: test_each_new_commit
        runs-on: ubuntu-20.04
        steps:
            - name: "Checkout"
              uses: actions/checkout@v1

            - name: "Login to quay"
              uses: docker/login-action@v1
              with:
                  registry: quay.io
                  username: ${{ secrets.QUAY_USERNAME }}
                  password: ${{ secrets.QUAY_PASSWORD }}

            - name: "Install build dependencies"
              run: "sudo pip install -r ./requirements-dev.txt"

            - name: "Server: Build docker image"
              run: "rkd :build:docker"
              working-directory: "server"

            - name: "Bahub client: Build docker image"
              run: "rkd :build:docker"
              working-directory: "bahub"

            - name: "Save server docker image as artifact"
              run: "docker save quay.io/riotkit/backuprepository:latest-dev > server.docker.tar.gz"

            - name: "Save bahub docker image as artifact"
              run: "docker save quay.io/riotkit/bahub:latest-dev > bahub.docker.tar.gz"

            - name: "Release development dockers"
              run: "docker push quay.io/riotkit/backup-repository:latest-dev && docker push quay.io/riotkit/bahub:latest-dev"

    "test_integration_each_new_commit":
        needs: release_dev_dockers
        runs-on: ubuntu-20.04
        steps:
            - name: "Checkout"
              uses: actions/checkout@v1

            - name: "Install build dependencies"
              run: "sudo pip install -r ./requirements-dev.txt"

            - name: "Setup test environment"
              run: "rkd :run"
              working-directory: "integration-env"

    "release_dockers":
        needs: test_integration_each_new_commit
        runs-on: ubuntu-20.04
        steps:
            - name: "Checkout"
              uses: actions/checkout@v1

            - name: "Install build dependencies"
              run: "sudo pip install -r ./requirements-dev.txt"

            - name: "Release server docker"
              run: "rkd :docker:release"
              working-directory: "server"

            - name: "Release bahub docker"
              run: "rkd :docker:release"
              working-directory: "bahub"

    "release_dist":
        needs: test_integration_each_new_commit
        runs-on: ubuntu-20.04
        steps:
            - name: "Checkout"
              uses: actions/checkout@v1

            - name: "Build manual documentation"
              run: "rkd :release:docs"
              working-directory: "server"
