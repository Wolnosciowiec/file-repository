# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    env(BACKUP_MAX_VERSIONS): 5
    env(BACKUP_ONE_VERSION_MAX_SIZE): "25MB"
    env(BACKUP_COLLECTION_MAX_SIZE): "125MB"
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Kernel.php,Domain/*/Entity,Domain/*/ValueObject,Migrations,Domain/Common/Service/Bus/*,Domain/*/Context,Domain/*/Exception,Domain/*/Form,Domain/*/Parameters,Domain/*/Response,Domain/*/Security}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\Domain\Authentication\ActionHandler\TokenGenerationHandler:
        class: App\Domain\Authentication\ActionHandler\TokenGenerationHandler
        arguments:
            $manager: '@App\Domain\Authentication\Manager\TokenManager'
            $expirationTime: '%env(TOKEN_EXPIRATION_TIME)%'

    App\Domain\Storage\Factory\PathFactory:
        class: App\Domain\Storage\Factory\PathFactory
        arguments:
            $basePath: '%env(TEMP_DIRECTORY)%'

    App\Infrastructure\Authentication\Service\AESDecryptionService:
        arguments:
            $secret: '%env(ENC_TOKEN_PHRASE)%'

    App\Infrastructure\Authentication\Event\Subscriber\TokenSubscriber:
        class: App\Infrastructure\Authentication\Event\Subscriber\TokenSubscriber
        arguments:
            $factory: '@App\Domain\Authentication\Factory\IncomingTokenFactory'
            $tokenStorage: '@security.token_storage'
            $isDev: '%kernel.debug%'

    App\Domain\Storage\Repository\StagingAreaRepository:
        class: App\Domain\Storage\Repository\StagingAreaRepository
        arguments:
            $tempPath: '%env(TEMP_DIRECTORY)%'

    App\Infrastructure\Storage\Manager\DownloadViaGuzzleProvider:
        class: App\Infrastructure\Storage\Manager\DownloadViaGuzzleProvider
        arguments:
            $state: '@App\Domain\Common\Manager\StateManager'

    App\Infrastructure\Storage\Manager\TestHttpDownloadProvider:
        class: App\Infrastructure\Storage\Manager\TestHttpDownloadProvider
        arguments:
            $parentProvider: '@App\Infrastructure\Storage\Manager\DownloadViaGuzzleProvider'

    App\Domain\Backup\Settings\BackupSettings:
        class: App\Domain\Backup\Settings\BackupSettings
        arguments:
            $maxBackupsCountPerCollection: '%env(BACKUP_MAX_VERSIONS)%'
            $maxOneBackupVersionSize: '%env(BACKUP_ONE_VERSION_MAX_SIZE)%'
            $maxWholeCollectionSize: '%env(BACKUP_COLLECTION_MAX_SIZE)%'

    ro_fs:
        class: App\Infrastructure\Storage\Manager\FlysystemFilesystemManager
        arguments:
            $fs: '@oneup_flysystem.readonly_filesystem'
            $stateManager: '@App\Domain\Common\Manager\StateManager'

    rw_fs:
        class: App\Infrastructure\Storage\Manager\FlysystemFilesystemManager
        arguments:
            $fs: '@oneup_flysystem.readwrite_filesystem'
            $stateManager: '@App\Domain\Common\Manager\StateManager'

    App\Domain\Storage\Manager\FilesystemManager:
        alias: App\Domain\Storage\Manager\SeparatedReadWriteFilesystemManager

    App\Domain\Storage\Manager\SeparatedReadWriteFilesystemManager:
        arguments:
            $readFS: '@ro_fs'
            $writeFS: '@rw_fs'

    s3_client:
        class: Aws\S3\S3Client
        arguments:
            - version: '%env(FS_AWSS3V3_VERSION)%'
              region: "%env(FS_AWSS3V3_REGION)%" # 'eu-central-1' for example
              endpoint: "%env(FS_AWSS3V3_OPTIONS_ENDPOINT)%"
              bucket_endpoint: false
              use_path_style_endpoint: true
              credentials:
                  key: "%env(FS_AWSS3V3_KEY)%"
                  secret: "%env(FS_AWSS3V3_SECRET)%"
